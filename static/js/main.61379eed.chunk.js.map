{"version":3,"sources":["components/YieldTable.js","contexts/filters.context.js","components/Filters.js","components/TopNavbar.js","contexts/inputs.context.js","components/Inputs.js","App.js","reportWebVitals.js","index.js","utility/helpers.js","utility/utils.js","utility/api.js"],"names":["expandRow","renderer","pool","Row","addLiquidityUrl","buyTokenUrl","Col","href","target","rel","tokenAddress","addressUrl","network","prettyPercentage","apy","text","formatPercentage","formatApyAndAmount","amount","formatFiat","className","columns","dataField","sort","formatter","toUpperCase","_","logo","assets","name","Image","src","poolLogoUrl","length","coinLogoUrl","roundedCircle","map","asset","totalApy","totalApyAmount","dailyApy","dailyApyAmount","withdrawalFee","numeral","value","tradingApr","OverlayTrigger","overlay","Popover","id","Title","as","Content","Table","striped","bordered","hover","compoundingsPerYear","formatInteger","vaultApr","beefyPerformanceFee","callFee","vaultApy","lpFee","Button","variant","tvl","YieldTable","yields","keyField","data","bootstrap4","defaultSorted","order","emptyFilters","desiredCoins","strictFilter","exactMatch","desiredPlatforms","desiredNetworks","includeSingleAssets","includeLPs","defaultFilters","FiltersContext","createContext","Filters","loading","poolCount","useContext","filters","setFilters","handleChange","event","handleCheckBoxChange","checked","Jumbotron","Form","Group","Label","Control","size","type","placeholder","onChange","Check","Input","htmlFor","Spinner","animation","role","ButtonGroup","onClick","TopNavbar","useState","copied","setCopied","Navbar","bg","Brand","alt","Nav","placement","Tooltip","onCopy","setTimeout","Link","defaultInputs","capital","InputsContext","Inputs","inputs","setInputs","InputGroup","Prepend","Text","App","setYields","setLoading","useEffect","a","getYieldsWithPrices","_yields","fetchData","finalYields","addApyValues","filterPools","self","Container","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","textHasAnyOfArray","array","exact","t","indexOf","arrayHasAnyOfArray","desired","d","require","calcDaily","g","Math","pow","log10","isNaN","formatAny","num","format","pools","desiredPlatformsArray","trim","split","desiredNetworksArray","filter","toLowerCase","desiredCoinsArray","exists","arrayHasAllOfArray","platform","parseFloat","y","networks","network_info","explorer","getPools","fetch","result","beginningText","endingText","substr","replaceAll","jsonObj","eval","network_id","key","fetchAllPools","Promise","all","Object","keys","allCombined","concat","f","json","prices","apyBreakdowns","tvls","lpPrice","tvlToken","apyBreakdown","depositFee","b","ticker","path","address"],"mappings":"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","file":"static/js/main.61379eed.chunk.js","sourcesContent":["import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './YieldTable.scss'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\n\r\nimport Button from 'react-bootstrap/Button'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport {Image, OverlayTrigger, Popover} from 'react-bootstrap'\r\nimport {addressUrl, coinLogoUrl, poolLogoUrl} from '../utility/api'\r\nimport {formatFiat, formatInteger, formatPercentage} from '../utility/utils'\r\n\r\nconst expandRow = {\r\n  renderer: pool => (\r\n    <Row>\r\n      { (pool.addLiquidityUrl || pool.buyTokenUrl) &&\r\n        <Col>{pool.addLiquidityUrl && <a href={pool.addLiquidityUrl} target=\"_blank\" rel=\"noreferrer\">Add Liquidity</a>} {(pool.addLiquidityUrl && pool.buyTokenUrl) && ' | '} {pool.buyTokenUrl && <a href={pool.buyTokenUrl} target=\"_blank\" rel=\"noreferrer\">Buy Token</a>}</Col>}\r\n      {pool.tokenAddress &&\r\n        <Col><a href={addressUrl(pool.network, pool.tokenAddress)} target=\"_blank\" rel=\"noreferrer\">{pool.tokenAddress}</a></Col>}\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst poolFormatter = (_, {logo, assets, name}) =>\r\n  <div className='pool-name'>\r\n    <span>{logo ?\r\n            <Image src={poolLogoUrl(logo)} /> :\r\n          assets.length === 1 ?\r\n            <Image src={coinLogoUrl(assets[0])} roundedCircle /> :\r\n              assets.map(asset => <Image className='stacked-logo' key={asset} src={coinLogoUrl(asset)} roundedCircle />)\r\n        } {name}</span>\r\n  </div>\r\n\r\nconst networkFormatter = network => network.toUpperCase()\r\n\r\n\r\nconst prettyPercentage = apy => {\r\n  const text = formatPercentage(apy)\r\n  return text === '' ? '🔥' : text\r\n}\r\n\r\nconst formatApyAndAmount = (apy, amount) =>\r\n  <>\r\n    <span>{prettyPercentage(apy)}</span>\r\n    {amount && formatFiat(amount) !== '' ? <span className={'text-success apy-fiat-text'}>{formatFiat(amount)}</span> : ''}\r\n  </>\r\n\r\nconst apyFormatter = (totalApy, {totalApyAmount}) => formatApyAndAmount(totalApy, totalApyAmount)\r\nconst dailyFormatter = (dailyApy, {dailyApyAmount}) => formatApyAndAmount(dailyApy, dailyApyAmount)\r\n\r\nconst withdrawalFeeFormatter = (withdrawalFee, {dailyApy}) => <span className={\r\n    numeral(withdrawalFee).value() === 0 ? 'text-success' :\r\n    numeral(withdrawalFee).value() > dailyApy ? 'text-danger' : ''}>{withdrawalFee}</span>\r\n\r\nconst tradingFeesFormatter = (_, pool) =>\r\npool.tradingApr ?\r\n  <OverlayTrigger\r\n    overlay={\r\n      <Popover id=\"popover-basic\">\r\n        <Popover.Title as=\"h3\">APY Breakdown</Popover.Title>\r\n        <Popover.Content>\r\n          <Table striped bordered hover>\r\n            <tbody>\r\n            {pool.compoundingsPerYear && <tr>\r\n              <td>Compounds</td>\r\n              <td>{formatInteger(pool.compoundingsPerYear)}</td>\r\n            </tr>}\r\n            {pool.vaultApr && <tr>\r\n              <td>Vault APR</td>\r\n              <td>{prettyPercentage(pool.vaultApr)}</td>\r\n            </tr>}\r\n            {pool.beefyPerformanceFee && <tr>\r\n              <td>Beefy Fee</td>\r\n              <td>{prettyPercentage(pool.beefyPerformanceFee)}</td>\r\n            </tr>}\r\n            {pool.callFee && <tr>\r\n              <td>Call Fee</td>\r\n              <td>{prettyPercentage(pool.callFee/100)}</td>\r\n            </tr>}\r\n            {pool.vaultApy && <tr>\r\n              <td>Vault APY</td>\r\n              <td>{prettyPercentage(pool.vaultApy)}</td>\r\n            </tr>}\r\n            {pool.lpFee && <tr>\r\n              <td>LP Fee</td>\r\n              <td>{prettyPercentage(pool.lpFee)}</td>\r\n            </tr>}\r\n            {pool.tradingApr && <tr>\r\n              <td>Trading APR</td>\r\n              <td>{prettyPercentage(pool.tradingApr)}</td>\r\n            </tr>}\r\n            {pool.totalApy && <tr>\r\n              <td>Total APY</td>\r\n              <td>{prettyPercentage(pool.totalApy)}</td>\r\n            </tr>}\r\n            </tbody>\r\n          </Table>\r\n        </Popover.Content>\r\n      </Popover>\r\n    }\r\n  >\r\n    <Button variant=\"success\">Included</Button>\r\n  </OverlayTrigger> : pool.assets.length === 1 ? '-' : \"Unknown\"\r\n\r\nconst tvlFormatter = tvl => formatFiat(tvl)\r\n\r\nconst columns = [\r\n  {\r\n    dataField: \"network\",\r\n    text: \"Network\",\r\n    sort: true,\r\n    formatter: networkFormatter\r\n  },\r\n\r\n  {\r\n    dataField: \"platform\",\r\n    text: \"Platform\",\r\n    sort: true\r\n  },\r\n  {\r\n    dataField: \"name\",\r\n    text: \"Pool\",\r\n    formatter: poolFormatter\r\n  },\r\n  {\r\n    dataField: \"totalApy\",\r\n    text: \"APY\",\r\n    sort: true,\r\n    formatter: apyFormatter\r\n  },\r\n  {\r\n    dataField: \"dailyApy\",\r\n    text: \"Daily\",\r\n    sort: true,\r\n    formatter: dailyFormatter\r\n  },\r\n  {\r\n    dataField: \"withdrawalFee\",\r\n    text: \"Withdraw\",\r\n    sort: true,\r\n    formatter: withdrawalFeeFormatter\r\n  },\r\n  {\r\n    dataField: \"tradingApr\",\r\n    text: \"Trading Fees\",\r\n    formatter: tradingFeesFormatter\r\n  },\r\n  {\r\n    dataField: \"tvl\",\r\n    text: \"TVL\",\r\n    sort: true,\r\n    formatter: tvlFormatter\r\n  }\r\n]\r\n\r\nconst YieldTable = ({yields}) =>\r\n  <BootstrapTable\r\n    keyField=\"key\"\r\n    data={yields}\r\n    columns={columns}\r\n    expandRow={expandRow}\r\n    striped\r\n    hover\r\n    bootstrap4\r\n    defaultSorted={[{ dataField: 'totalApy', order: 'desc'}]}/>\r\n\r\nexport default YieldTable\r\n","import { createContext } from 'react'\r\n\r\nexport const emptyFilters = {\r\n  desiredCoins: '',\r\n  strictFilter: true,\r\n  exactMatch: false,\r\n  desiredPlatforms: '',\r\n  desiredNetworks: '',\r\n  includeSingleAssets: true,\r\n  includeLPs: true\r\n}\r\n\r\nexport const defaultFilters = {\r\n  ...emptyFilters,\r\n  desiredCoins: 'usdc dai busd usdt',\r\n}\r\n\r\nconst FiltersContext = createContext(defaultFilters)\r\n\r\nexport default FiltersContext","import React, {useContext} from 'react'\r\n\r\nimport './Filters.scss'\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport {Form, ButtonGroup, Spinner} from 'react-bootstrap'\r\nimport FiltersContext, {emptyFilters, defaultFilters} from '../contexts/filters.context'\r\n\r\nconst Filters = ({loading, poolCount}) => {\r\n  const { filters, setFilters } = useContext(FiltersContext)\r\n\r\n  const handleChange = event => {\r\n    const { value, name } = event.target\r\n\r\n    setFilters({...filters, [name]: value })\r\n  }\r\n\r\n  const handleCheckBoxChange = event => {\r\n    const { checked, name } = event.target\r\n\r\n    setFilters({...filters, [name]: checked })\r\n  }\r\n\r\n  const { desiredCoins, strictFilter, exactMatch, desiredPlatforms, desiredNetworks, includeSingleAssets, includeLPs } = filters\r\n\r\n  return (\r\n      <Jumbotron className='filters'>\r\n        <Form.Group>\r\n          <Form.Label>💎 Coins to Ride</Form.Label>\r\n          <Form.Control name='desiredCoins' value={desiredCoins} size=\"sm\" type=\"text\" placeholder=\"e.g. usdc dai busd\" onChange={handleChange} />\r\n          <Form.Check>\r\n            <Form.Check.Input id='strictFilter' name='strictFilter' checked={strictFilter} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='strictFilter'>Show ONLY these coins <span className='silent'>(USDC won't show USDC-DAI)</span></Form.Check.Label>\r\n          </Form.Check>\r\n          <Form.Check>\r\n            <Form.Check.Input id='exactMatch' name='exactMatch' checked={exactMatch} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='exactMatch'>Exact Match <span className='silent'>(USDT won't match fUSDT)</span></Form.Check.Label>\r\n          </Form.Check>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Check>\r\n            <Form.Check.Input id='includeLPs' name='includeLPs' checked={includeLPs}  type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='includeLPs'>Include Liquidity Pools</Form.Check.Label>\r\n          </Form.Check>\r\n          <Form.Check>\r\n            <Form.Check.Input id='includeSingleAssets' name='includeSingleAssets' checked={includeSingleAssets} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='includeSingleAssets'>Include Single Assets</Form.Check.Label>\r\n          </Form.Check>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Label>🏰 Platforms to Ride</Form.Label>\r\n          <Form.Control name='desiredPlatforms' value={desiredPlatforms} size=\"sm\" type=\"text\" placeholder=\"e.g. cake aave sushi\" onChange={handleChange}/>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Label>🌐 Networks to Ride</Form.Label>\r\n          <Form.Control name='desiredNetworks' value={desiredNetworks} size=\"sm\" type=\"text\" placeholder=\"e.g. bsc polygon\" onChange={handleChange}/>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <span>{loading ? <>Loading pools... <Spinner size='sm' animation=\"border\" role=\"status\"/></> :\r\n          poolCount === 0 ? 'No pools found, please check your filters' :\r\n            `Found ${poolCount} pool${poolCount === 1 ? '' : 's'} on 🐮 Beefy Finance.`}</span>\r\n        <ButtonGroup className='reset-filters-btn'>\r\n          <Button size='sm' variant='info' onClick={() => { setFilters(emptyFilters)}}>Clear Filters</Button>\r\n          <Button size='sm' variant='success' onClick={() => { setFilters(defaultFilters)}}>Default Filters</Button>\r\n        </ButtonGroup>\r\n      </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","import {Nav, Navbar, OverlayTrigger, Tooltip} from 'react-bootstrap'\r\n\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport './TopNavbar.scss'\r\nimport {useState} from 'react'\r\n\r\nconst TopNavbar = () => {\r\n  const [copied, setCopied] = useState(false)\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"\">\r\n          <img\r\n            alt=\"\"\r\n            src=\"/hat_short.png\"\r\n            className=\"navbar-image\"\r\n          />{'   '}\r\n          <span className='navbar-title'>yield.rodeo</span>\r\n        </Navbar.Brand>\r\n        <Nav className=\"ml-auto\">\r\n          <OverlayTrigger\r\n            placement=\"bottom\"\r\n            overlay={<Tooltip>{copied ? 'Copied!' : 'Click to copy!'}</Tooltip>}\r\n          >\r\n            <CopyToClipboard text={'0x6e1b11ad54068dd3C7A2cAf334A7010f0B59511C'}\r\n            onCopy={() => {\r\n              setCopied(true)\r\n              setTimeout(() => { setCopied(false) },1000)\r\n            }}>\r\n              <span>❤️ 0x6e1b11ad54068dd3C7A2cAf334A7010f0B59511C ❤️</span>\r\n            </CopyToClipboard>\r\n          </OverlayTrigger>\r\n        </Nav>\r\n      <Nav>\r\n        <Nav.Link className='navbar-contact' href={'https://naezith.com/?id=contact'} target=\"_blank\" rel=\"noreferrer\">Contact</Nav.Link>\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default TopNavbar","import { createContext } from 'react'\r\n\r\nexport const emptyInputs = {\r\n  capital: 100000\r\n}\r\n\r\nexport const defaultInputs = {\r\n  ...emptyInputs\r\n}\r\n\r\nconst InputsContext = createContext(defaultInputs)\r\n\r\nexport default InputsContext","import React, {useContext} from 'react'\r\n\r\nimport './Filters.scss'\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport {Form, InputGroup} from 'react-bootstrap'\r\nimport InputsContext from '../contexts/inputs.context'\r\n\r\nconst Inputs = () => {\r\n  const { inputs, setInputs } = useContext(InputsContext)\r\n\r\n  const handleChange = event => {\r\n    const { value, name } = event.target\r\n\r\n    setInputs({...inputs, [name]: value })\r\n  }\r\n\r\n  const { capital } = inputs\r\n\r\n  return (\r\n    <Jumbotron className='filters'>\r\n      <Form.Label>💰 Capital</Form.Label>\r\n      <InputGroup className=\"mb-3\" size=\"sm\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>$</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control name='capital' value={capital} type=\"number\" placeholder=\"e.g. 1000\" onChange={handleChange} />\r\n      </InputGroup>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Inputs\r\n","import React, {useEffect, useState} from 'react'\r\n\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport './App.css'\r\nimport {getYieldsWithPrices} from './utility/api'\r\nimport YieldTable from './components/YieldTable'\r\nimport Filters from './components/Filters'\r\nimport FiltersContext, {defaultFilters} from './contexts/filters.context'\r\nimport TopNavbar from './components/TopNavbar'\r\nimport {addApyValues, filterPools} from './utility/utils'\r\nimport {Col, Spinner} from 'react-bootstrap'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Inputs from './components/Inputs'\r\nimport InputsContext, {defaultInputs} from './contexts/inputs.context'\r\n\r\nconst App = () => {\r\n  const [yields, setYields] = useState([])\r\n  const [inputs, setInputs] = useState(defaultInputs)\r\n  const [filters, setFilters] = useState(defaultFilters)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      // Get yields\r\n      setLoading(true)\r\n      const _yields = await getYieldsWithPrices()\r\n      setLoading(false)\r\n      setYields(_yields)\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  const finalYields = addApyValues(filterPools(yields, filters).map(pool => ({ ...pool, self: pool })), inputs.capital)\r\n  return (\r\n    <div className='full-height'>\r\n      <Container className=\"p-3 App\">\r\n        <Row>\r\n          <Col>\r\n          <TopNavbar />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n      <InputsContext.Provider value={{inputs, setInputs}}>\r\n      <FiltersContext.Provider value={{filters, setFilters}}>\r\n      <Container className=\"p-3 App\">\r\n        <Row>\r\n          <Col>\r\n            <Inputs />\r\n            <Filters loading={loading} poolCount={finalYields.length}/>\r\n          </Col>\r\n        </Row>\r\n          { loading ?\r\n            <Spinner animation=\"border\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner> :\r\n\r\n            <Row>\r\n              <Col>\r\n                <YieldTable yields={finalYields} />\r\n              </Col>\r\n            </Row>\r\n          }\r\n      </Container>\r\n      </FiltersContext.Provider>\r\n      </InputsContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootswatch-darkly-bootstrap.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const textHasAnyOfArray = (text, array, exact=false) => {\r\n  for(const t of array) {\r\n    if(exact) {\r\n      if(text === t) return true\r\n    }\r\n    else if(text.indexOf(t) !== -1) return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport const arrayHasAnyOfArray = (assets, desired, exact=false) => {\r\n  for(const d of desired) {\r\n    if(exact) {\r\n      if(assets.indexOf(d) !== -1) return true\r\n    }\r\n    else {\r\n      for(const a of assets)\r\n        if(a.indexOf(d) !== -1) return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nexport const arrayHasAllOfArray = (assets, desired, exact=false) => {\r\n  for(const a of assets) {\r\n    if(exact) {\r\n      if(desired.indexOf(a) === -1) return false\r\n    }\r\n    else {\r\n      let exists = false\r\n      for(const d of desired) {\r\n        if(a.indexOf(d) !== -1) {\r\n          exists = true\r\n          break\r\n        }\r\n      }\r\n      if(!exists) return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n","import {arrayHasAllOfArray, arrayHasAnyOfArray, textHasAnyOfArray} from './helpers'\r\n\r\nconst numeral = require('numeral')\r\n\r\nexport const calcDaily = apy => {\r\n  const g = Math.pow(10, Math.log10(apy + 1) / 365) - 1;\r\n\r\n  if (isNaN(g)) {\r\n    return 0;\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nexport const formatAny = (num, format) => {\r\n  const text = numeral(num).format(format)\r\n  return text.indexOf('NaN') !== -1 ? '' : text\r\n}\r\n\r\nexport const formatPercentage = (num) => formatAny(num, '0.00a%')\r\nexport const formatInteger = (num) => formatAny(num, '0,0')\r\nexport const formatFiat = (num) => formatAny(num, '$0,0.0a')\r\n\r\nexport const filterPools = (pools, filters) => {\r\n  const { desiredCoins, strictFilter, exactMatch, desiredPlatforms, desiredNetworks, includeSingleAssets, includeLPs } = filters\r\n  const desiredPlatformsArray = desiredPlatforms.trim().toUpperCase().split(' ')\r\n  const desiredNetworksArray = desiredNetworks.trim().toUpperCase().split(' ')\r\n\r\n  return pools.filter(pool => {\r\n    const assets = pool.assets.map(a => a.toLowerCase())\r\n\r\n    if(!includeLPs && pool.assets.length > 1) return false\r\n    if(!includeSingleAssets && pool.assets.length === 1) return false\r\n\r\n    // Filter coins\r\n    const desiredCoinsArray = desiredCoins.trim().toLowerCase().split(' ')\r\n    if(desiredCoinsArray.length > 0) {\r\n      // Single asset\r\n      if(pool.assets.length === 1) {\r\n        if(!arrayHasAnyOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n      }\r\n      // Liquidity Pool\r\n      else {\r\n        if(strictFilter) {\r\n          if(!arrayHasAllOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n        }\r\n        else {\r\n          if(!arrayHasAnyOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n        }\r\n      }\r\n    }\r\n\r\n    // Filter platforms\r\n    if(desiredPlatformsArray.length > 0)\r\n      if(!textHasAnyOfArray(pool.platform.toUpperCase(), desiredPlatformsArray)) return false\r\n\r\n    // Filter networks\r\n    if(desiredNetworksArray.length > 0)\r\n      if(!textHasAnyOfArray(pool.network.toUpperCase(), desiredNetworksArray)) return false\r\n\r\n    return true\r\n  })\r\n}\r\n\r\nexport const addApyValues = (yields, capital) => {\r\n  capital = capital ? parseFloat(capital) : 0\r\n  if(capital === 0) return yields\r\n\r\n  return yields.map(y => (\r\n    {\r\n      ...y,\r\n      totalApyAmount: numeral(y.totalApy).value() * capital,\r\n      dailyApyAmount: numeral(y.dailyApy).value() * capital\r\n    }\r\n  ))\r\n}","import {calcDaily} from './utils'\r\n\r\nconst networks = ['avalanche', 'bsc', 'fantom', 'heco', 'polygon']\r\nconst network_info = {\r\n  'bsc': {\r\n    id: 56,\r\n    explorer: 'https://bscscan.com/address/'\r\n  },\r\n  'heco': {\r\n    id: 128,\r\n    explorer: 'https://hecoinfo.com/address/'\r\n  },\r\n  'polygon': {\r\n    id: 137,\r\n    explorer: 'https://polygonscan.com/address/'\r\n  },\r\n  'fantom': {\r\n    id: 250,\r\n    explorer: 'https://ftmscan.com/address/'\r\n  },\r\n  'avalanche': {\r\n    id: 43114,\r\n    explorer: 'https://cchain.explorer.avax.network/address/'\r\n  },\r\n}\r\n\r\nconst getPools = async (network, type) => {\r\n  const result = await fetch(\r\n      type === 'stake' ?\r\n          `https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/features/configure/stake/${network}_stake.js` :\r\n          `https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/features/configure/vault/${network}_pools.js`\r\n  )\r\n\r\n  let text = await result.text()\r\n  const beginningText = ' = ['\r\n  const endingText = '];'\r\n  text = text.substr(text.indexOf(beginningText) + beginningText.length - 1,\r\n      text.indexOf(endingText) - endingText.length)\r\n      .replaceAll('earnContractAbi: govPoolABI,', '')\r\n      .replaceAll(`, '4BELT'`, '')\r\n\r\n  const jsonObj = eval(text)\r\n\r\n  for(let pool of jsonObj) {\r\n    pool.network = network\r\n    pool.network_id = network_info[network].id\r\n    pool.key = network + '-' + pool.id\r\n    pool.type = type // stake or pool\r\n  }\r\n\r\n  return jsonObj\r\n}\r\n\r\nconst fetchAllPools = async () => {\r\n  let pools = {\r\n    'stake': {},\r\n    'pool': {},\r\n  }\r\n\r\n  await Promise.all(Object.keys(pools).map(async type => {\r\n    await Promise.all(networks.map(async network => {\r\n      pools[type][network] = await getPools(network, type)\r\n    }))\r\n  }))\r\n\r\n\r\n  let allCombined = []\r\n\r\n  for(let type of Object.keys(pools))\r\n    for(let network of networks)\r\n      allCombined = allCombined.concat(pools[type][network])\r\n\r\n  return allCombined\r\n}\r\n\r\nexport const getYieldsWithPrices = async () => {\r\n  const yields = await fetchAllPools()\r\n  const prices = await (await fetch('https://api.beefy.finance/lps')).json()\r\n  const apyBreakdowns = await (await fetch('https://api.beefy.finance/apy/breakdown')).json()\r\n  const tvls = await (await fetch('https://api.beefy.finance/tvl')).json()\r\n\r\n  return yields.map(pool => {\r\n    const lpPrice = prices[pool.id]\r\n    const tvlToken = tvls[pool.network_id][pool.id]\r\n    const apyBreakdown = apyBreakdowns[pool.id]\r\n    return {\r\n      depositFee: '0.0%',\r\n      withdrawalFee: '0.1%',\r\n      dailyApy: apyBreakdown && calcDaily(apyBreakdown.totalApy),\r\n      ...pool,\r\n      lpPrice: lpPrice,\r\n      tvl: tvlToken,\r\n      ...apyBreakdown\r\n    }\r\n  }).filter(pool => pool.tvl > 0 && pool.totalApy > 0.0001)\r\n      .sort((a, b) => a.totalApy < b.totalApy ? 1 : -1)\r\n}\r\n\r\nexport const coinLogoUrl = ticker => 'https://trustwallet-assets-api.vercel.app/api/symbol/'  + ticker\r\nexport const poolLogoUrl = path => 'https://raw.githubusercontent.com/beefyfinance/beefy-app/master/src/images/'  + path\r\nexport const addressUrl = (network, address) => network_info[network].explorer + address"],"sourceRoot":""}