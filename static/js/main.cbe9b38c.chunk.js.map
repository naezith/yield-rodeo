{"version":3,"sources":["components/YieldTable.js","contexts/filters.context.js","components/Filters.js","components/TopNavbar.js","App.js","reportWebVitals.js","index.js","utility/api.js","utility/helpers.js","utility/utils.js"],"names":["expandRow","renderer","pool","Row","addLiquidityUrl","buyTokenUrl","Col","href","target","rel","tokenAddress","addressUrl","network","columns","dataField","text","sort","formatter","toUpperCase","_","logo","assets","name","className","Image","src","poolLogoUrl","length","coinLogoUrl","roundedCircle","map","asset","totalApy","formatPercentage","dailyApy","withdrawalFee","numeral","value","tradingApr","OverlayTrigger","overlay","Popover","id","Title","as","Content","Table","striped","bordered","hover","compoundingsPerYear","formatInteger","vaultApr","beefyPerformanceFee","callFee","vaultApy","lpFee","Button","variant","tvl","formatFiat","YieldTable","yields","keyField","data","bootstrap4","defaultSorted","order","emptyFilters","desiredCoins","strictFilter","exactMatch","desiredPlatforms","desiredNetworks","includeSingleAssets","includeLPs","defaultFilters","FiltersContext","createContext","Filters","loading","poolCount","useContext","filters","setFilters","handleChange","event","handleCheckBoxChange","checked","Jumbotron","Form","Group","Label","Control","size","type","placeholder","onChange","Check","Input","htmlFor","ButtonGroup","onClick","TopNavbar","useState","copied","setCopied","Navbar","bg","Brand","alt","Nav","placement","Tooltip","onCopy","setTimeout","Link","App","setYields","setLoading","useEffect","a","getYieldsWithPrices","_yields","fetchData","filteredYields","filterPools","self","Container","fluid","Provider","Spinner","animation","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","networks","network_info","explorer","getPools","fetch","result","beginningText","endingText","substr","indexOf","replaceAll","jsonObj","eval","network_id","key","fetchAllPools","pools","Promise","all","Object","keys","allCombined","concat","f","json","prices","apyBreakdowns","tvls","lpPrice","tvlToken","apyBreakdown","depositFee","calcDaily","filter","b","ticker","path","address","textHasAnyOfArray","array","exact","t","arrayHasAnyOfArray","desired","d","require","apy","g","Math","pow","log10","isNaN","num","format","desiredPlatformsArray","trim","split","desiredNetworksArray","toLowerCase","desiredCoinsArray","exists","arrayHasAllOfArray","platform"],"mappings":"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","file":"static/js/main.cbe9b38c.chunk.js","sourcesContent":["import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './YieldTable.scss'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\n\r\nimport Button from 'react-bootstrap/Button'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport {Image, OverlayTrigger, Popover} from 'react-bootstrap'\r\nimport {addressUrl, coinLogoUrl, poolLogoUrl} from '../utility/api'\r\nimport {formatFiat, formatInteger, formatPercentage} from '../utility/utils'\r\n\r\nconst expandRow = {\r\n  renderer: pool => (\r\n    <Row>\r\n      { (pool.addLiquidityUrl || pool.buyTokenUrl) &&\r\n        <Col>{pool.addLiquidityUrl && <a href={pool.addLiquidityUrl} target=\"_blank\" rel=\"noreferrer\">Add Liquidity</a>} {(pool.addLiquidityUrl && pool.buyTokenUrl) && ' | '} {pool.buyTokenUrl && <a href={pool.buyTokenUrl} target=\"_blank\" rel=\"noreferrer\">Buy Token</a>}</Col>}\r\n      {pool.tokenAddress &&\r\n        <Col><a href={addressUrl(pool.network, pool.tokenAddress)} target=\"_blank\" rel=\"noreferrer\">{pool.tokenAddress}</a></Col>}\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst poolFormatter = (_, {logo, assets, name}) =>\r\n  <div className='pool-name'>\r\n    <span>{logo ?\r\n            <Image src={poolLogoUrl(logo)} /> :\r\n          assets.length === 1 ?\r\n            <Image src={coinLogoUrl(assets[0])} roundedCircle /> :\r\n              assets.map(asset => <Image className='stacked-logo' key={asset} src={coinLogoUrl(asset)} roundedCircle />)\r\n        } {name}</span>\r\n  </div>\r\n\r\nconst networkFormatter = network => network.toUpperCase()\r\n\r\nconst apyFormatter = totalApy => formatPercentage(totalApy)\r\n\r\nconst dailyFormatter = dailyApy => formatPercentage(dailyApy)\r\n\r\nconst withdrawalFeeFormatter = (withdrawalFee, {dailyApy}) => <span className={\r\n    numeral(withdrawalFee).value() === 0 ? 'text-success' :\r\n    numeral(withdrawalFee).value() > dailyApy ? 'text-danger' : ''}>{withdrawalFee}</span>\r\n\r\nconst tradingFeesFormatter = (_, pool) =>\r\npool.tradingApr ?\r\n  <OverlayTrigger\r\n    overlay={\r\n      <Popover id=\"popover-basic\">\r\n        <Popover.Title as=\"h3\">APY Breakdown</Popover.Title>\r\n        <Popover.Content>\r\n          <Table striped bordered hover>\r\n            <tbody>\r\n            {pool.compoundingsPerYear && <tr>\r\n              <td>Compounds</td>\r\n              <td>{formatInteger(pool.compoundingsPerYear)}</td>\r\n            </tr>}\r\n            {pool.vaultApr && <tr>\r\n              <td>Vault APR</td>\r\n              <td>{formatPercentage(pool.vaultApr)}</td>\r\n            </tr>}\r\n            {pool.beefyPerformanceFee && <tr>\r\n              <td>Beefy Fee</td>\r\n              <td>{formatPercentage(pool.beefyPerformanceFee)}</td>\r\n            </tr>}\r\n            {pool.callFee && <tr>\r\n              <td>Call Fee</td>\r\n              <td>{formatPercentage(pool.callFee/100)}</td>\r\n            </tr>}\r\n            {pool.vaultApy && <tr>\r\n              <td>Vault APY</td>\r\n              <td>{formatPercentage(pool.vaultApy)}</td>\r\n            </tr>}\r\n            {pool.lpFee && <tr>\r\n              <td>LP Fee</td>\r\n              <td>{formatPercentage(pool.lpFee)}</td>\r\n            </tr>}\r\n            {pool.tradingApr && <tr>\r\n              <td>Trading APR</td>\r\n              <td>{formatPercentage(pool.tradingApr)}</td>\r\n            </tr>}\r\n            {pool.totalApy && <tr>\r\n              <td>Total APY</td>\r\n              <td>{formatPercentage(pool.totalApy)}</td>\r\n            </tr>}\r\n            {pool.totalApy && <tr>\r\n              <td>Total APY</td>\r\n              <td>{formatPercentage(pool.totalApy)}</td>\r\n            </tr>}\r\n            </tbody>\r\n          </Table>\r\n        </Popover.Content>\r\n      </Popover>\r\n    }\r\n  >\r\n    <Button variant=\"success\">Included</Button>\r\n  </OverlayTrigger> : pool.assets.length === 1 ? '-' : \"Unknown\"\r\n\r\nconst tvlFormatter = tvl => formatFiat(tvl)\r\n\r\nconst columns = [\r\n  {\r\n    dataField: \"network\",\r\n    text: \"Network\",\r\n    sort: true,\r\n    formatter: networkFormatter\r\n  },\r\n\r\n  {\r\n    dataField: \"platform\",\r\n    text: \"Platform\",\r\n    sort: true\r\n  },\r\n  {\r\n    dataField: \"name\",\r\n    text: \"Pool\",\r\n    formatter: poolFormatter\r\n  },\r\n  {\r\n    dataField: \"totalApy\",\r\n    text: \"APY\",\r\n    sort: true,\r\n    formatter: apyFormatter\r\n  },\r\n  {\r\n    dataField: \"dailyApy\",\r\n    text: \"Daily\",\r\n    sort: true,\r\n    formatter: dailyFormatter\r\n  },\r\n  {\r\n    dataField: \"withdrawalFee\",\r\n    text: \"Withdraw Fee\",\r\n    sort: true,\r\n    formatter: withdrawalFeeFormatter\r\n  },\r\n  {\r\n    dataField: \"tradingApr\",\r\n    text: \"Trading Fees\",\r\n    formatter: tradingFeesFormatter\r\n  },\r\n  {\r\n    dataField: \"tvl\",\r\n    text: \"TVL\",\r\n    sort: true,\r\n    formatter: tvlFormatter\r\n  }\r\n]\r\n\r\nconst YieldTable = ({yields}) =>\r\n  <BootstrapTable\r\n    keyField=\"key\"\r\n    data={yields}\r\n    columns={columns}\r\n    expandRow={expandRow}\r\n    striped\r\n    hover\r\n    bootstrap4\r\n    defaultSorted={[{ dataField: 'totalApy', order: 'desc'}]}/>\r\n\r\nexport default YieldTable\r\n","import { createContext } from 'react'\r\n\r\nexport const emptyFilters = {\r\n  desiredCoins: '',\r\n  strictFilter: true,\r\n  exactMatch: false,\r\n  desiredPlatforms: '',\r\n  desiredNetworks: '',\r\n  includeSingleAssets: true,\r\n  includeLPs: true\r\n}\r\n\r\nexport const defaultFilters = {\r\n  ...emptyFilters,\r\n  desiredCoins: 'usdc dai busd usdt',\r\n}\r\n\r\nconst FiltersContext = createContext(defaultFilters)\r\n\r\nexport default FiltersContext","import React, {useContext} from 'react'\r\n\r\nimport './Filters.scss'\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport {Form, ButtonGroup} from 'react-bootstrap'\r\nimport FiltersContext, {emptyFilters, defaultFilters} from '../contexts/filters.context'\r\n\r\nconst Filters = ({loading, poolCount}) => {\r\n  const { filters, setFilters } = useContext(FiltersContext)\r\n\r\n  const handleChange = event => {\r\n    const { value, name } = event.target\r\n\r\n    setFilters({...filters, [name]: value })\r\n  }\r\n\r\n  const handleCheckBoxChange = event => {\r\n    const { checked, name } = event.target\r\n\r\n    setFilters({...filters, [name]: checked })\r\n  }\r\n\r\n  const { desiredCoins, strictFilter, exactMatch, desiredPlatforms, desiredNetworks, includeSingleAssets, includeLPs } = filters\r\n\r\n  return (\r\n      <Jumbotron className='filters'>\r\n        <Form.Group>\r\n          <Form.Label>💎 Coins to Ride</Form.Label>\r\n          <Form.Control name='desiredCoins' value={desiredCoins}size=\"sm\" type=\"text\" placeholder=\"e.g. usdc dai busd\" onChange={handleChange} />\r\n          <Form.Check>\r\n            <Form.Check.Input id='strictFilter' name='strictFilter' checked={strictFilter} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='strictFilter'>Show ONLY these coins <span className='silent'>(USDC won't show USDC-DAI)</span></Form.Check.Label>\r\n          </Form.Check>\r\n          <Form.Check>\r\n            <Form.Check.Input id='exactMatch' name='exactMatch' checked={exactMatch} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='exactMatch'>Exact Match <span className='silent'>(USDT won't match fUSDT)</span></Form.Check.Label>\r\n          </Form.Check>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Check>\r\n            <Form.Check.Input id='includeLPs' name='includeLPs' checked={includeLPs}  type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='includeLPs'>Include Liquidity Pools</Form.Check.Label>\r\n          </Form.Check>\r\n          <Form.Check>\r\n            <Form.Check.Input id='includeSingleAssets' name='includeSingleAssets' checked={includeSingleAssets} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='includeSingleAssets'>Include Single Assets</Form.Check.Label>\r\n          </Form.Check>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Label>🏰 Platforms to Ride</Form.Label>\r\n          <Form.Control name='desiredPlatforms' value={desiredPlatforms} size=\"sm\" type=\"text\" placeholder=\"e.g. cake aave sushi\" onChange={handleChange}/>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Label>🌐 Networks to Ride</Form.Label>\r\n          <Form.Control name='desiredNetworks' value={desiredNetworks} size=\"sm\" type=\"text\" placeholder=\"e.g. bsc polygon\" onChange={handleChange}/>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <span>{loading ? \"Loading pools...\" : poolCount === 0 ? 'No pools found, please check your filters' : `Found ${poolCount} pool${poolCount === 1 ? '' : 's'} on 🐮 Beefy Finance.`}</span>\r\n        <ButtonGroup className='reset-filters-btn'>\r\n          <Button size='sm' variant='info' onClick={() => { setFilters(emptyFilters)}}>Clear Filters</Button>\r\n          <Button size='sm' variant='success' onClick={() => { setFilters(defaultFilters)}}>Default Filters</Button>\r\n        </ButtonGroup>\r\n      </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","import {Nav, Navbar, OverlayTrigger, Tooltip} from 'react-bootstrap'\r\n\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport './TopNavbar.scss'\r\nimport {useState} from 'react'\r\n\r\nconst TopNavbar = () => {\r\n  const [copied, setCopied] = useState(false)\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"\">\r\n          <img\r\n            alt=\"\"\r\n            src=\"/hat_short.png\"\r\n            className=\"navbar-image\"\r\n          />{'   '}\r\n          <span className='navbar-title'>yield.rodeo</span>\r\n        </Navbar.Brand>\r\n        <Nav className=\"ml-auto\">\r\n          <OverlayTrigger\r\n            placement=\"bottom\"\r\n            overlay={<Tooltip>{copied ? 'Copied!' : 'Click to copy!'}</Tooltip>}\r\n          >\r\n            <CopyToClipboard text={'0x6e1b11ad54068dd3C7A2cAf334A7010f0B59511C'}\r\n            onCopy={() => {\r\n              setCopied(true)\r\n              setTimeout(() => { setCopied(false) },1000)\r\n            }}>\r\n              <span>❤️ 0x6e1b11ad54068dd3C7A2cAf334A7010f0B59511C ❤️</span>\r\n            </CopyToClipboard>\r\n          </OverlayTrigger>\r\n        </Nav>\r\n      <Nav>\r\n        <Nav.Link className='navbar-contact' href={'https://naezith.com/?id=contact'} target=\"_blank\" rel=\"noreferrer\">Contact</Nav.Link>\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default TopNavbar","import React, {useEffect, useState} from 'react'\r\n\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport './App.css'\r\nimport {getYieldsWithPrices} from './utility/api'\r\nimport YieldTable from './components/YieldTable'\r\nimport Filters from './components/Filters'\r\nimport FiltersContext, {defaultFilters} from './contexts/filters.context'\r\nimport TopNavbar from './components/TopNavbar'\r\nimport {filterPools} from './utility/utils'\r\nimport {Col, Spinner} from 'react-bootstrap'\r\nimport Row from 'react-bootstrap/Row'\r\n\r\nconst App = () => {\r\n  const [yields, setYields] = useState([])\r\n  const [filters, setFilters] = useState(defaultFilters)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      // Get yields\r\n      setLoading(true)\r\n      const _yields = await getYieldsWithPrices()\r\n      setLoading(false)\r\n      setYields(_yields)\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  const filteredYields = filterPools(yields, filters).map(pool => ({ ...pool, self: pool }))\r\n  return (\r\n    <div className='full-height'>\r\n      <Container className=\"p-3 App\" fluid>\r\n        <Row>\r\n          <Col>\r\n          <TopNavbar />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n      <FiltersContext.Provider value={{filters, setFilters}}>\r\n      <Container className=\"p-3 App\" fluid>\r\n        <Row>\r\n          <Col>\r\n            <Filters loading={loading} poolCount={filteredYields.length}/>\r\n          </Col>\r\n        </Row>\r\n          { loading ?\r\n            <Spinner animation=\"border\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner> :\r\n\r\n            <Row>\r\n              <Col>\r\n                <YieldTable yields={filteredYields} />\r\n              </Col>\r\n            </Row>\r\n          }\r\n      </Container>\r\n      </FiltersContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootswatch-darkly-bootstrap.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import {calcDaily} from './utils'\r\n\r\nconst networks = ['avalanche', 'bsc', 'fantom', 'heco', 'polygon']\r\nconst network_info = {\r\n  'bsc': {\r\n    id: 56,\r\n    explorer: 'https://bscscan.com/address/'\r\n  },\r\n  'heco': {\r\n    id: 128,\r\n    explorer: 'https://hecoinfo.com/address/'\r\n  },\r\n  'polygon': {\r\n    id: 137,\r\n    explorer: 'https://polygonscan.com/address/'\r\n  },\r\n  'fantom': {\r\n    id: 250,\r\n    explorer: 'https://ftmscan.com/address/'\r\n  },\r\n  'avalanche': {\r\n    id: 43114,\r\n    explorer: 'https://cchain.explorer.avax.network/address/'\r\n  },\r\n}\r\n\r\nconst getPools = async (network, type) => {\r\n  const result = await fetch(\r\n      type === 'stake' ?\r\n          `https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/features/configure/stake/${network}_stake.js` :\r\n          `https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/features/configure/vault/${network}_pools.js`\r\n  )\r\n\r\n  let text = await result.text()\r\n  const beginningText = ' = ['\r\n  const endingText = '];'\r\n  text = text.substr(text.indexOf(beginningText) + beginningText.length - 1,\r\n      text.indexOf(endingText) - endingText.length)\r\n      .replaceAll('earnContractAbi: govPoolABI,', '')\r\n      .replaceAll(`, '4BELT'`, '')\r\n\r\n  const jsonObj = eval(text)\r\n\r\n  for(let pool of jsonObj) {\r\n    pool.network = network\r\n    pool.network_id = network_info[network].id\r\n    pool.key = network + '-' + pool.id\r\n    pool.type = type // stake or pool\r\n  }\r\n\r\n  return jsonObj\r\n}\r\n\r\nconst fetchAllPools = async () => {\r\n  let pools = {\r\n    'stake': {},\r\n    'pool': {},\r\n  }\r\n\r\n  await Promise.all(Object.keys(pools).map(async type => {\r\n    await Promise.all(networks.map(async network => {\r\n      pools[type][network] = await getPools(network, type)\r\n    }))\r\n  }))\r\n\r\n\r\n  let allCombined = []\r\n\r\n  for(let type of Object.keys(pools))\r\n    for(let network of networks)\r\n      allCombined = allCombined.concat(pools[type][network])\r\n\r\n  return allCombined\r\n}\r\n\r\nexport const getYieldsWithPrices = async () => {\r\n  const yields = await fetchAllPools()\r\n  const prices = await (await fetch('https://api.beefy.finance/lps')).json()\r\n  const apyBreakdowns = await (await fetch('https://api.beefy.finance/apy/breakdown')).json()\r\n  const tvls = await (await fetch('https://api.beefy.finance/tvl')).json()\r\n\r\n  return yields.map(pool => {\r\n    const lpPrice = prices[pool.id]\r\n    const tvlToken = tvls[pool.network_id][pool.id]\r\n    const apyBreakdown = apyBreakdowns[pool.id]\r\n    return {\r\n      depositFee: '0.0%',\r\n      withdrawalFee: '0.1%',\r\n      dailyApy: apyBreakdown && calcDaily(apyBreakdown.totalApy),\r\n      ...pool,\r\n      lpPrice: lpPrice,\r\n      tvl: tvlToken,\r\n      ...apyBreakdown\r\n    }\r\n  }).filter(pool => pool.tvl > 0 && pool.totalApy > 0.0001)\r\n      .sort((a, b) => a.totalApy < b.totalApy ? 1 : -1)\r\n}\r\n\r\nexport const coinLogoUrl = ticker => 'https://trustwallet-assets-api.vercel.app/api/symbol/'  + ticker\r\nexport const poolLogoUrl = path => 'https://raw.githubusercontent.com/beefyfinance/beefy-app/master/src/images/'  + path\r\nexport const addressUrl = (network, address) => network_info[network].explorer + address","export const textHasAnyOfArray = (text, array, exact=false) => {\r\n  for(const t of array) {\r\n    if(exact) {\r\n      if(text === t) return true\r\n    }\r\n    else if(text.indexOf(t) !== -1) return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport const arrayHasAnyOfArray = (assets, desired, exact=false) => {\r\n  for(const d of desired) {\r\n    if(exact) {\r\n      if(assets.indexOf(d) !== -1) return true\r\n    }\r\n    else {\r\n      for(const a of assets)\r\n        if(a.indexOf(d) !== -1) return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nexport const arrayHasAllOfArray = (assets, desired, exact=false) => {\r\n  for(const a of assets) {\r\n    if(exact) {\r\n      if(desired.indexOf(a) === -1) return false\r\n    }\r\n    else {\r\n      let exists = false\r\n      for(const d of desired) {\r\n        if(a.indexOf(d) !== -1) {\r\n          exists = true\r\n          break\r\n        }\r\n      }\r\n      if(!exists) return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n","import {arrayHasAllOfArray, arrayHasAnyOfArray, textHasAnyOfArray} from './helpers'\r\n\r\nconst numeral = require('numeral')\r\n\r\nexport const calcDaily = apy => {\r\n  const g = Math.pow(10, Math.log10(apy + 1) / 365) - 1;\r\n\r\n  if (isNaN(g)) {\r\n    return 0;\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nexport const formatPercentage = (num) => {\r\n  const text = numeral(num).format('0.00a%')\r\n  return text.indexOf('NaN') !== -1 ? '🔥' : text\r\n}\r\n\r\nexport const formatInteger = (num) => {\r\n  return numeral(num).format('0,0')\r\n}\r\n\r\nexport const formatFiat = (num) => {\r\n  return numeral(num).format('$0,0.0a')\r\n}\r\n\r\nexport const filterPools = (pools, filters) => {\r\n  const { desiredCoins, strictFilter, exactMatch, desiredPlatforms, desiredNetworks, includeSingleAssets, includeLPs } = filters\r\n  const desiredPlatformsArray = desiredPlatforms.trim().toUpperCase().split(' ')\r\n  const desiredNetworksArray = desiredNetworks.trim().toUpperCase().split(' ')\r\n\r\n  return pools.filter(pool => {\r\n    const assets = pool.assets.map(a => a.toLowerCase())\r\n\r\n    if(!includeLPs && pool.assets.length > 1) return false\r\n    if(!includeSingleAssets && pool.assets.length === 1) return false\r\n\r\n    // Filter coins\r\n    const desiredCoinsArray = desiredCoins.trim().toLowerCase().split(' ')\r\n    if(desiredCoinsArray.length > 0) {\r\n      // Single asset\r\n      if(pool.assets.length === 1) {\r\n        if(!arrayHasAnyOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n      }\r\n      // Liquidity Pool\r\n      else {\r\n        if(strictFilter) {\r\n          if(!arrayHasAllOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n        }\r\n        else {\r\n          if(!arrayHasAnyOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n        }\r\n      }\r\n    }\r\n\r\n    // Filter platforms\r\n    if(desiredPlatformsArray.length > 0)\r\n      if(!textHasAnyOfArray(pool.platform.toUpperCase(), desiredPlatformsArray)) return false\r\n\r\n    // Filter networks\r\n    if(desiredNetworksArray.length > 0)\r\n      if(!textHasAnyOfArray(pool.network.toUpperCase(), desiredNetworksArray)) return false\r\n\r\n    return true\r\n  })\r\n}"],"sourceRoot":""}