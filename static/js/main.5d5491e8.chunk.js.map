{"version":3,"sources":["utility/helpers.js","utility/utils.js","components/YieldTable.js","contexts/filters.context.js","components/Filters.js","components/TopNavbar.js","contexts/inputs.context.js","components/Inputs.js","App.js","reportWebVitals.js","index.js","utility/api.js"],"names":["textHasAnyOfArray","text","array","exact","t","indexOf","arrayHasAnyOfArray","assets","desired","d","a","numeral","require","calcDaily","apy","g","Math","pow","log10","isNaN","calcMonthly","formatAny","num","format","formatPercentage","formatInteger","formatFiat","filterPools","pools","filters","desiredCoins","strictFilter","exactMatch","desiredPlatforms","desiredNetworks","includeSingleAssets","includeLPs","desiredPlatformsArray","trim","toUpperCase","split","desiredNetworksArray","filter","pool","map","toLowerCase","length","desiredCoinsArray","exists","arrayHasAllOfArray","platform","network","addApyValues","yields","capital","parseFloat","y","totalApyAmount","totalApy","value","dailyApyAmount","dailyApy","monthlyApyAmount","monthlyApy","expandRow","renderer","Row","Col","vaultUrl","href","target","rel","addLiquidityUrl","buyTokenUrl","tokenAddress","addressUrl","prettyPercentage","formatApyAndAmount","amount","className","columns","dataField","sort","formatter","_","logo","name","Image","src","poolLogoUrl","coinLogoUrl","onError","e","useFallbackImage","roundedCircle","asset","withdrawalFee","depositFee","tvl","YieldTable","keyField","data","striped","hover","bootstrap4","defaultSorted","order","emptyFilters","defaultFilters","FiltersContext","createContext","Filters","loading","poolCount","useContext","setFilters","handleChange","event","handleCheckBoxChange","checked","Jumbotron","Form","Group","Label","Control","size","type","placeholder","onChange","Check","Input","id","htmlFor","Spinner","animation","role","ButtonGroup","Button","variant","onClick","TopNavbar","useState","copied","setCopied","Navbar","bg","Brand","alt","Nav","OverlayTrigger","placement","overlay","Tooltip","onCopy","setTimeout","Link","defaultInputs","amountBefore","amountAfter","InputsContext","Inputs","inputs","setInputs","amountDifference","pnl","fieldsAreValid","sign","InputGroup","Prepend","Text","App","setYields","setLoading","useEffect","getYieldsWithPrices","_yields","fetchData","finalYields","self","Container","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","fetchHeaders","cache","networks","network_info","explorer","getPools","fetch","result","beginningText","endingText","substr","replace","jsonObj","eval","network_id","key","fetchAllPools","Promise","all","Object","keys","allCombined","concat","f","json","prices","apyBreakdowns","tvls","lpPrice","tvlToken","apyBreakdown","beefyUrl","b","ev","fallbackUrl","ticker","ext","path","address"],"mappings":"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","file":"static/js/main.5d5491e8.chunk.js","sourcesContent":["export const textHasAnyOfArray = (text, array, exact=false) => {\r\n  for(const t of array) {\r\n    if(exact) {\r\n      if(text === t) return true\r\n    }\r\n    else if(text.indexOf(t) !== -1) return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport const arrayHasAnyOfArray = (assets, desired, exact=false) => {\r\n  for(const d of desired) {\r\n    if(exact) {\r\n      if(assets.indexOf(d) !== -1) return true\r\n    }\r\n    else {\r\n      for(const a of assets)\r\n        if(a.indexOf(d) !== -1) return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nexport const arrayHasAllOfArray = (assets, desired, exact=false) => {\r\n  for(const a of assets) {\r\n    if(exact) {\r\n      if(desired.indexOf(a) === -1) return false\r\n    }\r\n    else {\r\n      let exists = false\r\n      for(const d of desired) {\r\n        if(a.indexOf(d) !== -1) {\r\n          exists = true\r\n          break\r\n        }\r\n      }\r\n      if(!exists) return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n","import {arrayHasAllOfArray, arrayHasAnyOfArray, textHasAnyOfArray} from './helpers'\r\n\r\nconst numeral = require('numeral')\r\n\r\nexport const calcDaily = apy => {\r\n  const g = Math.pow(10, Math.log10(apy + 1) / 365) - 1;\r\n\r\n  if (isNaN(g)) {\r\n    return 0;\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nexport const calcMonthly = apy => {\r\n  return apy / 12\r\n}\r\n\r\n\r\nexport const formatAny = (num, format) => {\r\n  const text = numeral(num).format(format)\r\n  return text.indexOf('NaN') !== -1 ? '' : text\r\n}\r\n\r\nexport const formatPercentage = (num) => formatAny(num, '0.00a%')\r\nexport const formatInteger = (num) => formatAny(num, '0,0')\r\nexport const formatFiat = (num) => formatAny(num, '$0,0.0a')\r\n\r\nexport const filterPools = (pools, filters) => {\r\n  const { desiredCoins, strictFilter, exactMatch, desiredPlatforms, desiredNetworks, includeSingleAssets, includeLPs } = filters\r\n  const desiredPlatformsArray = desiredPlatforms.trim().toUpperCase().split(' ')\r\n  const desiredNetworksArray = desiredNetworks.trim().toUpperCase().split(' ')\r\n\r\n  return pools.filter(pool => {\r\n    const assets = pool.assets.map(a => a.toLowerCase())\r\n\r\n    if(!includeLPs && pool.assets.length > 1) return false\r\n    if(!includeSingleAssets && pool.assets.length === 1) return false\r\n\r\n    // Filter coins\r\n    const desiredCoinsArray = desiredCoins.trim().toLowerCase().split(' ')\r\n    if(desiredCoinsArray.length > 0) {\r\n      // Single asset\r\n      if(pool.assets.length === 1) {\r\n        if(!arrayHasAnyOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n      }\r\n      // Liquidity Pool\r\n      else {\r\n        if(strictFilter) {\r\n          if(!arrayHasAllOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n        }\r\n        else {\r\n          if(!arrayHasAnyOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n        }\r\n      }\r\n    }\r\n\r\n    // Filter platforms\r\n    if(desiredPlatformsArray.length > 0)\r\n      if(!textHasAnyOfArray(pool.platform.toUpperCase(), desiredPlatformsArray)) return false\r\n\r\n    // Filter networks\r\n    if(desiredNetworksArray.length > 0)\r\n      if(!textHasAnyOfArray(pool.network.toUpperCase(), desiredNetworksArray)) return false\r\n\r\n    return true\r\n  })\r\n}\r\n\r\nexport const addApyValues = (yields, capital) => {\r\n  capital = capital ? parseFloat(capital) : 0\r\n  if(capital === 0) return yields\r\n\r\n  return yields.map(y => (\r\n    {\r\n      ...y,\r\n      totalApyAmount: numeral(y.totalApy).value() * capital,\r\n      dailyApyAmount: numeral(y.dailyApy).value() * capital,\r\n      monthlyApyAmount: numeral(y.monthlyApy).value() * capital,\r\n    }\r\n  ))\r\n}","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './YieldTable.scss'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\n\r\nimport Button from 'react-bootstrap/Button'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport {Image, OverlayTrigger, Popover} from 'react-bootstrap'\r\nimport {addressUrl, coinLogoUrl, useFallbackImage, poolLogoUrl} from '../utility/api'\r\nimport {formatFiat, formatInteger, formatPercentage} from '../utility/utils'\r\n\r\nconst expandRow = {\r\n  renderer: pool => (\r\n    <Row>\r\n    <Col>\r\n      <Row>\r\n        { pool.vaultUrl &&\r\n          <Col><b>{<a href={pool.vaultUrl} target=\"_blank\" rel=\"noreferrer\">Deposit on Beefy / View APY Chart</a>}</b></Col>}\r\n\r\n      </Row>\r\n      <Row>\r\n        { (pool.addLiquidityUrl || pool.buyTokenUrl) &&\r\n          <Col>{pool.addLiquidityUrl && <a href={pool.addLiquidityUrl} target=\"_blank\" rel=\"noreferrer\">Add Liquidity</a>} {(pool.addLiquidityUrl && pool.buyTokenUrl) && ' | '} {pool.buyTokenUrl && <a href={pool.buyTokenUrl} target=\"_blank\" rel=\"noreferrer\">Buy Token</a>}</Col>}\r\n        {pool.tokenAddress &&\r\n          <Col><a href={addressUrl(pool.network, pool.tokenAddress)} target=\"_blank\" rel=\"noreferrer\">{pool.tokenAddress}</a></Col>}\r\n      </Row>\r\n    </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst poolFormatter = (_, {logo, assets, name}) =>\r\n  <div className='pool-name'>\r\n    <span>{logo ?\r\n            <Image src={poolLogoUrl(logo)} /> :\r\n          assets.length === 1 ?\r\n            <Image src={coinLogoUrl(assets[0], 'svg')} onError={e => useFallbackImage(e, coinLogoUrl(assets[0], 'png'))} roundedCircle /> :\r\n              assets.map(asset => <Image className='stacked-logo' key={asset} src={coinLogoUrl(asset, 'svg')} onError={e => useFallbackImage(e, coinLogoUrl(asset, 'png'))} roundedCircle />)\r\n        } {name}</span>\r\n  </div>\r\n\r\nconst networkFormatter = network => network.toUpperCase()\r\n\r\n\r\nconst prettyPercentage = apy => {\r\n  const text = formatPercentage(apy)\r\n  return text === '' ? '🔥' : text\r\n}\r\n\r\nconst formatApyAndAmount = (apy, amount) =>\r\n  <>\r\n    <span>{prettyPercentage(apy)}</span>\r\n    {amount && formatFiat(amount) !== '' ? <span className={'text-success apy-fiat-text'}>{formatFiat(amount)}</span> : ''}\r\n  </>\r\n\r\nconst apyFormatter = (totalApy, {totalApyAmount}) => formatApyAndAmount(totalApy, totalApyAmount)\r\nconst monthlyFormatter = (monthlyApy, {monthlyApyAmount}) => formatApyAndAmount(monthlyApy, monthlyApyAmount)\r\nconst dailyFormatter = (dailyApy, {dailyApyAmount}) => formatApyAndAmount(dailyApy, dailyApyAmount)\r\n\r\nconst withdrawalFeeFormatter = (withdrawalFee, {dailyApy}) => <span className={\r\n    numeral(withdrawalFee).value() === 0 ? '' :\r\n    numeral(withdrawalFee).value() > dailyApy ? 'text-danger' : ''}>{(withdrawalFee === \"0%\" ? '-' : withdrawalFee)}</span>\r\n\r\nconst depositFeeFormatter = (depositFee, {dailyApy}) => <span className={\r\n    numeral(depositFee).value() === 0 ? '' :\r\n    numeral(depositFee).value() > dailyApy ? 'text-danger' : ''}>{(depositFee === \"0%\" ? '-' : depositFee)}</span>\r\n\r\nconst tradingFeesFormatter = (_, pool) =>\r\npool.tradingApr ?\r\n  <OverlayTrigger\r\n    overlay={\r\n      <Popover id=\"popover-basic\">\r\n        <Popover.Title as=\"h3\">APY Breakdown</Popover.Title>\r\n        <Popover.Content>\r\n          <Table striped bordered hover>\r\n            <tbody>\r\n            {pool.compoundingsPerYear && <tr>\r\n              <td>Compounds</td>\r\n              <td>{formatInteger(pool.compoundingsPerYear)}</td>\r\n            </tr>}\r\n            {pool.vaultApr && <tr>\r\n              <td>Vault APR</td>\r\n              <td>{prettyPercentage(pool.vaultApr)}</td>\r\n            </tr>}\r\n            {pool.beefyPerformanceFee && <tr>\r\n              <td>Beefy Fee</td>\r\n              <td>{prettyPercentage(pool.beefyPerformanceFee)}</td>\r\n            </tr>}\r\n            {pool.callFee && <tr>\r\n              <td>Call Fee</td>\r\n              <td>{prettyPercentage(pool.callFee/100)}</td>\r\n            </tr>}\r\n            {pool.vaultApy && <tr>\r\n              <td>Vault APY</td>\r\n              <td>{prettyPercentage(pool.vaultApy)}</td>\r\n            </tr>}\r\n            {pool.lpFee && <tr>\r\n              <td>LP Fee</td>\r\n              <td>{prettyPercentage(pool.lpFee)}</td>\r\n            </tr>}\r\n            {pool.tradingApr && <tr>\r\n              <td>Trading APR</td>\r\n              <td>{prettyPercentage(pool.tradingApr)}</td>\r\n            </tr>}\r\n            {pool.totalApy && <tr>\r\n              <td>Total APY</td>\r\n              <td>{prettyPercentage(pool.totalApy)}</td>\r\n            </tr>}\r\n            </tbody>\r\n          </Table>\r\n        </Popover.Content>\r\n      </Popover>\r\n    }\r\n  >\r\n    <Button variant=\"success\">Included</Button>\r\n  </OverlayTrigger> : pool.assets.length === 1 ? '-' : \"Unknown\"\r\n\r\nconst tvlFormatter = tvl => <span className={\r\n    numeral(tvl).value() >= 1000000 ? 'text-success' : \r\n    numeral(tvl).value() < 100000 ? 'text-danger' : ''}>{formatFiat(tvl)}</span>\r\n\r\nconst columns = [\r\n  {\r\n    dataField: \"network\",\r\n    text: \"Network\",\r\n    sort: true,\r\n    formatter: networkFormatter\r\n  },\r\n\r\n  {\r\n    dataField: \"platform\",\r\n    text: \"Platform\",\r\n    sort: true\r\n  },\r\n  {\r\n    dataField: \"name\",\r\n    text: \"Pool\",\r\n    formatter: poolFormatter\r\n  },\r\n  {\r\n    dataField: \"totalApy\",\r\n    text: \"APY\",\r\n    sort: true,\r\n    formatter: apyFormatter\r\n  },\r\n  {\r\n    dataField: \"monthlyApy\",\r\n    text: \"Monthly\",\r\n    sort: true,\r\n    formatter: monthlyFormatter\r\n  },\r\n  {\r\n    dataField: \"dailyApy\",\r\n    text: \"Daily\",\r\n    sort: true,\r\n    formatter: dailyFormatter\r\n  },\r\n  {\r\n    dataField: \"withdrawalFee\",\r\n    text: \"Withdraw\",\r\n    sort: true,\r\n    formatter: withdrawalFeeFormatter\r\n  },\r\n  {\r\n    dataField: \"depositFee\",\r\n    text: \"Deposit\",\r\n    sort: true,\r\n    formatter: depositFeeFormatter\r\n  },\r\n  // {\r\n  //   dataField: \"tradingApr\",\r\n  //   text: \"Trading Fees\",\r\n  //   formatter: tradingFeesFormatter\r\n  // },\r\n  {\r\n    dataField: \"tvl\",\r\n    text: \"TVL\",\r\n    sort: true,\r\n    formatter: tvlFormatter\r\n  }\r\n]\r\n\r\nconst YieldTable = ({yields}) =>\r\n  <BootstrapTable\r\n    keyField=\"key\"\r\n    data={yields}\r\n    columns={columns}\r\n    expandRow={expandRow}\r\n    striped\r\n    hover\r\n    bootstrap4\r\n    defaultSorted={[{ dataField: 'totalApy', order: 'desc'}]}/>\r\n\r\nexport default YieldTable\r\n","import { createContext } from 'react'\r\n\r\nexport const emptyFilters = {\r\n  desiredCoins: '',\r\n  strictFilter: true,\r\n  exactMatch: false,\r\n  desiredPlatforms: '',\r\n  desiredNetworks: '',\r\n  includeSingleAssets: true,\r\n  includeLPs: true\r\n}\r\n\r\nexport const defaultFilters = {\r\n  ...emptyFilters,\r\n  desiredCoins: 'usdc dai busd usdt',\r\n}\r\n\r\nconst FiltersContext = createContext(defaultFilters)\r\n\r\nexport default FiltersContext","import React, {useContext} from 'react'\r\n\r\nimport './Filters.scss'\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport {Form, ButtonGroup, Spinner} from 'react-bootstrap'\r\nimport FiltersContext, {emptyFilters, defaultFilters} from '../contexts/filters.context'\r\n\r\nconst Filters = ({loading, poolCount}) => {\r\n  const { filters, setFilters } = useContext(FiltersContext)\r\n\r\n  const handleChange = event => {\r\n    const { value, name } = event.target\r\n\r\n    setFilters({...filters, [name]: value })\r\n  }\r\n\r\n  const handleCheckBoxChange = event => {\r\n    const { checked, name } = event.target\r\n\r\n    setFilters({...filters, [name]: checked })\r\n  }\r\n\r\n  const { desiredCoins, strictFilter, exactMatch, desiredPlatforms, desiredNetworks, includeSingleAssets, includeLPs } = filters\r\n\r\n  return (\r\n      <Jumbotron className='filters'>\r\n        <Form.Group>\r\n          <Form.Label>💎 Coins to Ride</Form.Label>\r\n          <Form.Control name='desiredCoins' value={desiredCoins} size=\"sm\" type=\"text\" placeholder=\"e.g. usdc dai busd\" onChange={handleChange} />\r\n          <Form.Check>\r\n            <Form.Check.Input id='strictFilter' name='strictFilter' checked={strictFilter} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='strictFilter'>Show ONLY these coins <span className='silent'>(USDC won't show USDC-DAI)</span></Form.Check.Label>\r\n          </Form.Check>\r\n          <Form.Check>\r\n            <Form.Check.Input id='exactMatch' name='exactMatch' checked={exactMatch} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='exactMatch'>Exact Match <span className='silent'>(USDT won't match fUSDT)</span></Form.Check.Label>\r\n          </Form.Check>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Check>\r\n            <Form.Check.Input id='includeLPs' name='includeLPs' checked={includeLPs}  type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='includeLPs'>Include Liquidity Pools</Form.Check.Label>\r\n          </Form.Check>\r\n          <Form.Check>\r\n            <Form.Check.Input id='includeSingleAssets' name='includeSingleAssets' checked={includeSingleAssets} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='includeSingleAssets'>Include Single Assets</Form.Check.Label>\r\n          </Form.Check>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Label>🏰 Platforms to Ride</Form.Label>\r\n          <Form.Control name='desiredPlatforms' value={desiredPlatforms} size=\"sm\" type=\"text\" placeholder=\"e.g. cake aave sushi\" onChange={handleChange}/>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Label>🌐 Networks to Ride</Form.Label>\r\n          <Form.Control name='desiredNetworks' value={desiredNetworks} size=\"sm\" type=\"text\" placeholder=\"e.g. bsc polygon\" onChange={handleChange}/>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <span>{loading ? <>Loading pools... <Spinner size='sm' animation=\"border\" role=\"status\"/></> :\r\n          poolCount === 0 ? 'No pools found, please check your filters' :\r\n            `Found ${poolCount} pool${poolCount === 1 ? '' : 's'} on 🐮 Beefy Finance.`}</span>\r\n        <ButtonGroup className='reset-filters-btn'>\r\n          <Button size='sm' variant='info' onClick={() => { setFilters(emptyFilters)}}>Clear Filters</Button>\r\n          <Button size='sm' variant='success' onClick={() => { setFilters(defaultFilters)}}>Default Filters</Button>\r\n        </ButtonGroup>\r\n      </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","import {Nav, Navbar, OverlayTrigger, Tooltip} from 'react-bootstrap'\r\n\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport './TopNavbar.scss'\r\nimport {useState} from 'react'\r\n\r\nconst TopNavbar = () => {\r\n  const [copied, setCopied] = useState(false)\r\n\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"\">\r\n          <img\r\n            alt=\"\"\r\n            src=\"/hat_short.png\"\r\n            className=\"navbar-image\"\r\n          />{'   '}\r\n          <span className='navbar-title'>yield.rodeo</span>\r\n        </Navbar.Brand>\r\n        <Nav className=\"ml-auto\">\r\n          <OverlayTrigger\r\n            placement=\"bottom\"\r\n            overlay={<Tooltip>{copied ? 'Copied!' : 'Click to copy!'}</Tooltip>}\r\n          >\r\n            <CopyToClipboard text={'0x6e1b11ad54068dd3C7A2cAf334A7010f0B59511C'}\r\n            onCopy={() => {\r\n              setCopied(true)\r\n              setTimeout(() => { setCopied(false) },1000)\r\n            }}>\r\n              <span>❤️ Donate: 0x6e1b11ad54068dd3C7A2cAf334A7010f0B59511C ❤️</span>\r\n            </CopyToClipboard>\r\n          </OverlayTrigger>\r\n        </Nav>\r\n      <Nav>\r\n        <Nav.Link className='navbar-contact' href={'https://naezith.com/?id=contact'} target=\"_blank\" rel=\"noreferrer\">Contact</Nav.Link>\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default TopNavbar","import { createContext } from 'react'\r\n\r\nexport const emptyInputs = {\r\n  capital: 100000,\r\n  amountBefore: 100000,\r\n  amountAfter: 125000\r\n}\r\n\r\nexport const defaultInputs = {\r\n  ...emptyInputs\r\n}\r\n\r\nconst InputsContext = createContext(defaultInputs)\r\n\r\nexport default InputsContext","import React, {useContext} from 'react'\r\n\r\nimport './Filters.scss'\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport {Form, InputGroup} from 'react-bootstrap'\r\nimport InputsContext from '../contexts/inputs.context'\r\nimport {formatAny} from '../utility/utils'\r\n\r\nconst Inputs = () => {\r\n  const { inputs, setInputs } = useContext(InputsContext)\r\n\r\n  const handleChange = event => {\r\n    const { value, name } = event.target\r\n\r\n    setInputs({...inputs, [name]: value })\r\n  }\r\n\r\n  const { capital, amountBefore, amountAfter } = inputs\r\n\r\n  const amountDifference = amountAfter - amountBefore\r\n  const pnl = amountDifference / amountBefore\r\n  const fieldsAreValid = amountAfter !== '' && amountBefore !== ''\r\n  const sign = pnl > 0 ? '+' : ''\r\n\r\n  return (\r\n    <Jumbotron className='filters'>\r\n      <Form.Label>💰 Capital</Form.Label>\r\n      <InputGroup className=\"mb-3\" size=\"sm\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>$</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control name='capital' value={capital} type=\"number\" placeholder=\"e.g. 1000\" onChange={handleChange} />\r\n      </InputGroup>\r\n\r\n      <hr/>\r\n\r\n      <Form.Label>🖩 Profit % Calculator </Form.Label>\r\n      <InputGroup className=\"mb-3\" size=\"sm\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Before</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control name='amountBefore' value={amountBefore} type=\"number\" placeholder=\"e.g. 1000\" onChange={handleChange} />\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>After</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control name='amountAfter' value={amountAfter} type=\"number\" placeholder=\"e.g. 1000\" onChange={handleChange} />\r\n      </InputGroup>\r\n      <Form.Label className={ !fieldsAreValid || pnl > 0 ? 'text-success' : pnl < 0 ? 'text-danger' : ''}>\r\n        { fieldsAreValid ? 'P&L: ' + sign + formatAny(amountDifference, '0,0.[000]') + ' (' + sign + formatAny(pnl, '0.[000]%') + ')' :\r\n          'Please fill the fields'}\r\n      </Form.Label>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Inputs\r\n","import React, {useEffect, useState} from 'react'\r\n\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport './App.css'\r\nimport {getYieldsWithPrices} from './utility/api'\r\nimport YieldTable from './components/YieldTable'\r\nimport Filters from './components/Filters'\r\nimport FiltersContext, {defaultFilters} from './contexts/filters.context'\r\nimport TopNavbar from './components/TopNavbar'\r\nimport {addApyValues, filterPools} from './utility/utils'\r\nimport {Col, Spinner} from 'react-bootstrap'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Inputs from './components/Inputs'\r\nimport InputsContext, {defaultInputs} from './contexts/inputs.context'\r\n\r\nconst App = () => {\r\n  const [yields, setYields] = useState([])\r\n  const [inputs, setInputs] = useState(defaultInputs)\r\n  const [filters, setFilters] = useState(defaultFilters)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      // Get yields\r\n      setLoading(true)\r\n      const _yields = await getYieldsWithPrices()\r\n      setLoading(false)\r\n      setYields(_yields)\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  const finalYields = addApyValues(filterPools(yields, filters).map(pool => ({ ...pool, self: pool })), inputs.capital)\r\n  return (\r\n    <div className='full-height'>\r\n      <Container className=\"p-3 App\">\r\n        <Row>\r\n          <Col>\r\n          <TopNavbar />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n      <InputsContext.Provider value={{inputs, setInputs}}>\r\n      <FiltersContext.Provider value={{filters, setFilters}}>\r\n      <Container className=\"p-3 App\">\r\n        <Row>\r\n          <Col>\r\n            <Filters loading={loading} poolCount={finalYields.length}/>\r\n          </Col>\r\n          <Col>\r\n            <Inputs />\r\n          </Col>\r\n        </Row>\r\n          { loading ?\r\n            <Spinner animation=\"border\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner> :\r\n\r\n            <Row>\r\n              <Col>\r\n                <YieldTable yields={finalYields} />\r\n              </Col>\r\n            </Row>\r\n          }\r\n      </Container>\r\n      </FiltersContext.Provider>\r\n      </InputsContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootswatch-darkly-bootstrap.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import {calcDaily, calcMonthly} from './utils'\r\n\r\nconst fetchHeaders = {cache: \"no-store\"}\r\nconst networks = ['avalanche', 'bsc', 'fantom', 'heco', 'polygon', 'arbitrum', 'harmony', 'celo', 'moonriver', 'cronos', 'fuse', 'metis']\r\nconst network_info = {\r\n  'bsc': {\r\n    id: 56,\r\n    explorer: 'https://bscscan.com/'\r\n  },\r\n  'heco': {\r\n    id: 128,\r\n    explorer: 'https://hecoinfo.com/'\r\n  },\r\n  'polygon': {\r\n    id: 137,\r\n    explorer: 'https://polygonscan.com/'\r\n  },\r\n  'fantom': {\r\n    id: 250,\r\n    explorer: 'https://ftmscan.com/'\r\n  },\r\n  'avalanche': {\r\n    id: 43114,\r\n    explorer: 'https://cchain.explorer.avax.network/'\r\n  },\r\n  'arbitrum': {\r\n    id: 42161,\r\n    explorer: 'https://arbiscan.io/'\r\n  },\r\n  'harmony': {\r\n    id: 1666600000,\r\n    explorer: 'https://explorer.harmony.one/'\r\n  },\r\n  'celo': {\r\n    id: 42220,\r\n    explorer: 'https://explorer.celo.org/'\r\n  },\r\n  'moonriver': {\r\n    id: 1285,\r\n    explorer: 'https://blockscout.moonriver.moonbeam.network/'\r\n  },\r\n  'cronos': {\r\n    id: 25,\r\n    explorer: 'https://cronos.crypto.org/explorer/'\r\n  },\r\n  'fuse': {\r\n    id: 122,\r\n    explorer: 'https://explorer.fuse.io/'\r\n  },\r\n  'metis': {\r\n    id: 1088,\r\n    explorer: 'https://andromeda-explorer.metis.io/'\r\n  },\r\n}\r\n\r\nconst getPools = async (network, type) => {\r\n  const result = await fetch(\r\n      type === 'stake' ?\r\n          `https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/features/configure/stake/${network}_stake.js` :\r\n          `https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/features/configure/vault/${network}_pools.js`\r\n  , fetchHeaders)\r\n\r\n  let text = await result.text()\r\n  const beginningText = ' = ['\r\n  const endingText = '];'\r\n  text = text.substr(text.indexOf(beginningText) + beginningText.length - 1,\r\n      text.indexOf(endingText) - endingText.length)\r\n      .replace(/earnContractAbi: govPoolABI,/g, '')\r\n      .replace(/, '4BELT'/g, '')\r\n      .replace(/partners: \\[.*\\]/g, 'partners: []')\r\n\r\n  const jsonObj = eval(text)\r\n\r\n  for(let pool of jsonObj) {\r\n    pool.network = network\r\n    pool.network_id = network_info[network].id\r\n    pool.key = network + '-' + pool.id\r\n    pool.type = type // stake or pool\r\n    \r\n    // Fix withdrawalFee formatting, API bad formatting\r\n    if(pool.withdrawalFee && pool.withdrawalFee.length > 0) {\r\n      if(pool.withdrawalFee === \"0.0%\") {\r\n        pool.withdrawalFee = \"0%\"\r\n      }\r\n      if(pool.withdrawalFee[0] === '.') {\r\n        pool.withdrawalFee = \"0\" + pool.withdrawalFee\r\n      }\r\n    }\r\n\r\n    // Fix depositFee formatting, API bad formatting\r\n    if(pool.depositFee && pool.depositFee.length > 0) {\r\n      if(pool.depositFee[0] === '.') {\r\n        pool.depositFee = \"0\" + pool.depositFee\r\n      }\r\n      pool.depositFee = pool.depositFee.replace(\"<\", \"\")\r\n    }\r\n  }\r\n\r\n  return jsonObj\r\n}\r\n\r\nconst fetchAllPools = async () => {\r\n  let pools = {\r\n    'stake': {},\r\n    'pool': {},\r\n  }\r\n\r\n  await Promise.all(Object.keys(pools).map(async type => {\r\n    await Promise.all(networks.map(async network => {\r\n      pools[type][network] = await getPools(network, type)\r\n    }))\r\n  }))\r\n\r\n\r\n  let allCombined = []\r\n\r\n  for(let type of Object.keys(pools))\r\n    for(let network of networks)\r\n      allCombined = allCombined.concat(pools[type][network])\r\n\r\n  return allCombined\r\n}\r\n\r\nexport const getYieldsWithPrices = async () => {\r\n  const yields = await fetchAllPools()\r\n  const prices = await (await fetch('https://api.beefy.finance/lps', fetchHeaders)).json()\r\n  const apyBreakdowns = await (await fetch('https://api.beefy.finance/apy/breakdown', fetchHeaders)).json()\r\n  const tvls = await (await fetch('https://api.beefy.finance/tvl', fetchHeaders)).json()\r\n\r\n  return yields.map(pool => {\r\n    const lpPrice = prices[pool.id]\r\n    const tvlToken = tvls[pool.network_id] ? tvls[pool.network_id][pool.id] : ''\r\n    const apyBreakdown = apyBreakdowns[pool.id]\r\n    return {\r\n      vaultUrl: beefyUrl(pool.network, pool.id),  \r\n      withdrawalFee: '0.1%',\r\n      depositFee: '0%',\r\n      dailyApy: apyBreakdown && calcDaily(apyBreakdown.totalApy),\r\n      monthlyApy: apyBreakdown && calcMonthly(apyBreakdown.totalApy),\r\n      ...pool,\r\n      lpPrice: lpPrice,\r\n      tvl: tvlToken,\r\n      ...apyBreakdown\r\n    }\r\n  }).filter(pool => pool.tvl > 0 && pool.totalApy > 0.0001)\r\n      .sort((a, b) => a.totalApy < b.totalApy ? 1 : -1)\r\n}\r\n\r\nexport const useFallbackImage = (ev, fallbackUrl) => { ev.target.src = fallbackUrl }\r\nexport const coinLogoUrl = (ticker, ext='svg') => 'https://raw.githubusercontent.com/beefyfinance/beefy-app/master/src/images/single-assets/'  + ticker + '.' + ext\r\nexport const poolLogoUrl = path => 'https://raw.githubusercontent.com/beefyfinance/beefy-app/master/src/images/'  + path\r\nexport const addressUrl = (network, address) => network_info[network].explorer + 'address/' + address\r\nexport const beefyUrl = (network, id) => 'https://beta.beefy.finance/#/'+ network + '/vault/' + id"],"sourceRoot":""}