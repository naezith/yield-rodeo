{"version":3,"sources":["utility/helpers.js","utility/utils.js","components/YieldTable.js","contexts/filters.context.js","components/Filters.js","components/TopNavbar.js","contexts/inputs.context.js","components/Inputs.js","App.js","reportWebVitals.js","index.js","utility/api.js"],"names":["textHasAnyOfArray","text","array","exact","t","indexOf","arrayHasAnyOfArray","assets","desired","d","a","numeral","require","calcDaily","apy","g","Math","pow","log10","isNaN","formatAny","num","format","formatPercentage","formatInteger","formatFiat","filterPools","pools","filters","desiredCoins","strictFilter","exactMatch","desiredPlatforms","desiredNetworks","includeSingleAssets","includeLPs","desiredPlatformsArray","trim","toUpperCase","split","desiredNetworksArray","filter","pool","map","toLowerCase","length","desiredCoinsArray","exists","arrayHasAllOfArray","platform","network","addApyValues","yields","capital","parseFloat","y","totalApyAmount","totalApy","value","dailyApyAmount","dailyApy","expandRow","renderer","Row","addLiquidityUrl","buyTokenUrl","Col","href","target","rel","tokenAddress","addressUrl","prettyPercentage","formatApyAndAmount","amount","className","columns","dataField","sort","formatter","_","logo","name","Image","src","poolLogoUrl","coinLogoUrl","roundedCircle","asset","withdrawalFee","tradingApr","OverlayTrigger","overlay","Popover","id","Title","as","Content","Table","striped","bordered","hover","compoundingsPerYear","vaultApr","beefyPerformanceFee","callFee","vaultApy","lpFee","Button","variant","tvl","YieldTable","keyField","data","bootstrap4","defaultSorted","order","emptyFilters","defaultFilters","FiltersContext","createContext","Filters","loading","poolCount","useContext","setFilters","handleChange","event","handleCheckBoxChange","checked","Jumbotron","Form","Group","Label","Control","size","type","placeholder","onChange","Check","Input","htmlFor","Spinner","animation","role","ButtonGroup","onClick","TopNavbar","useState","copied","setCopied","Navbar","bg","Brand","alt","Nav","placement","Tooltip","onCopy","setTimeout","Link","defaultInputs","amountBefore","amountAfter","InputsContext","Inputs","inputs","setInputs","amountDifference","pnl","fieldsAreValid","sign","InputGroup","Prepend","Text","App","setYields","setLoading","useEffect","getYieldsWithPrices","_yields","fetchData","finalYields","self","Container","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","networks","network_info","explorer","getPools","fetch","result","beginningText","endingText","substr","replace","jsonObj","eval","network_id","key","fetchAllPools","Promise","all","Object","keys","allCombined","concat","f","json","prices","apyBreakdowns","tvls","lpPrice","tvlToken","apyBreakdown","depositFee","b","ticker","path","address"],"mappings":"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","file":"static/js/main.44976e43.chunk.js","sourcesContent":["export const textHasAnyOfArray = (text, array, exact=false) => {\r\n  for(const t of array) {\r\n    if(exact) {\r\n      if(text === t) return true\r\n    }\r\n    else if(text.indexOf(t) !== -1) return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport const arrayHasAnyOfArray = (assets, desired, exact=false) => {\r\n  for(const d of desired) {\r\n    if(exact) {\r\n      if(assets.indexOf(d) !== -1) return true\r\n    }\r\n    else {\r\n      for(const a of assets)\r\n        if(a.indexOf(d) !== -1) return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nexport const arrayHasAllOfArray = (assets, desired, exact=false) => {\r\n  for(const a of assets) {\r\n    if(exact) {\r\n      if(desired.indexOf(a) === -1) return false\r\n    }\r\n    else {\r\n      let exists = false\r\n      for(const d of desired) {\r\n        if(a.indexOf(d) !== -1) {\r\n          exists = true\r\n          break\r\n        }\r\n      }\r\n      if(!exists) return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n","import {arrayHasAllOfArray, arrayHasAnyOfArray, textHasAnyOfArray} from './helpers'\r\n\r\nconst numeral = require('numeral')\r\n\r\nexport const calcDaily = apy => {\r\n  const g = Math.pow(10, Math.log10(apy + 1) / 365) - 1;\r\n\r\n  if (isNaN(g)) {\r\n    return 0;\r\n  }\r\n\r\n  return g;\r\n}\r\n\r\nexport const formatAny = (num, format) => {\r\n  const text = numeral(num).format(format)\r\n  return text.indexOf('NaN') !== -1 ? '' : text\r\n}\r\n\r\nexport const formatPercentage = (num) => formatAny(num, '0.00a%')\r\nexport const formatInteger = (num) => formatAny(num, '0,0')\r\nexport const formatFiat = (num) => formatAny(num, '$0,0.0a')\r\n\r\nexport const filterPools = (pools, filters) => {\r\n  const { desiredCoins, strictFilter, exactMatch, desiredPlatforms, desiredNetworks, includeSingleAssets, includeLPs } = filters\r\n  const desiredPlatformsArray = desiredPlatforms.trim().toUpperCase().split(' ')\r\n  const desiredNetworksArray = desiredNetworks.trim().toUpperCase().split(' ')\r\n\r\n  return pools.filter(pool => {\r\n    const assets = pool.assets.map(a => a.toLowerCase())\r\n\r\n    if(!includeLPs && pool.assets.length > 1) return false\r\n    if(!includeSingleAssets && pool.assets.length === 1) return false\r\n\r\n    // Filter coins\r\n    const desiredCoinsArray = desiredCoins.trim().toLowerCase().split(' ')\r\n    if(desiredCoinsArray.length > 0) {\r\n      // Single asset\r\n      if(pool.assets.length === 1) {\r\n        if(!arrayHasAnyOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n      }\r\n      // Liquidity Pool\r\n      else {\r\n        if(strictFilter) {\r\n          if(!arrayHasAllOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n        }\r\n        else {\r\n          if(!arrayHasAnyOfArray(assets, desiredCoinsArray, exactMatch)) return false\r\n        }\r\n      }\r\n    }\r\n\r\n    // Filter platforms\r\n    if(desiredPlatformsArray.length > 0)\r\n      if(!textHasAnyOfArray(pool.platform.toUpperCase(), desiredPlatformsArray)) return false\r\n\r\n    // Filter networks\r\n    if(desiredNetworksArray.length > 0)\r\n      if(!textHasAnyOfArray(pool.network.toUpperCase(), desiredNetworksArray)) return false\r\n\r\n    return true\r\n  })\r\n}\r\n\r\nexport const addApyValues = (yields, capital) => {\r\n  capital = capital ? parseFloat(capital) : 0\r\n  if(capital === 0) return yields\r\n\r\n  return yields.map(y => (\r\n    {\r\n      ...y,\r\n      totalApyAmount: numeral(y.totalApy).value() * capital,\r\n      dailyApyAmount: numeral(y.dailyApy).value() * capital\r\n    }\r\n  ))\r\n}","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './YieldTable.scss'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\n\r\nimport Button from 'react-bootstrap/Button'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport {Image, OverlayTrigger, Popover} from 'react-bootstrap'\r\nimport {addressUrl, coinLogoUrl, poolLogoUrl} from '../utility/api'\r\nimport {formatFiat, formatInteger, formatPercentage} from '../utility/utils'\r\n\r\nconst expandRow = {\r\n  renderer: pool => (\r\n    <Row>\r\n      { (pool.addLiquidityUrl || pool.buyTokenUrl) &&\r\n        <Col>{pool.addLiquidityUrl && <a href={pool.addLiquidityUrl} target=\"_blank\" rel=\"noreferrer\">Add Liquidity</a>} {(pool.addLiquidityUrl && pool.buyTokenUrl) && ' | '} {pool.buyTokenUrl && <a href={pool.buyTokenUrl} target=\"_blank\" rel=\"noreferrer\">Buy Token</a>}</Col>}\r\n      {pool.tokenAddress &&\r\n        <Col><a href={addressUrl(pool.network, pool.tokenAddress)} target=\"_blank\" rel=\"noreferrer\">{pool.tokenAddress}</a></Col>}\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst poolFormatter = (_, {logo, assets, name}) =>\r\n  <div className='pool-name'>\r\n    <span>{logo ?\r\n            <Image src={poolLogoUrl(logo)} /> :\r\n          assets.length === 1 ?\r\n            <Image src={coinLogoUrl(assets[0])} roundedCircle /> :\r\n              assets.map(asset => <Image className='stacked-logo' key={asset} src={coinLogoUrl(asset)} roundedCircle />)\r\n        } {name}</span>\r\n  </div>\r\n\r\nconst networkFormatter = network => network.toUpperCase()\r\n\r\n\r\nconst prettyPercentage = apy => {\r\n  const text = formatPercentage(apy)\r\n  return text === '' ? '🔥' : text\r\n}\r\n\r\nconst formatApyAndAmount = (apy, amount) =>\r\n  <>\r\n    <span>{prettyPercentage(apy)}</span>\r\n    {amount && formatFiat(amount) !== '' ? <span className={'text-success apy-fiat-text'}>{formatFiat(amount)}</span> : ''}\r\n  </>\r\n\r\nconst apyFormatter = (totalApy, {totalApyAmount}) => formatApyAndAmount(totalApy, totalApyAmount)\r\nconst dailyFormatter = (dailyApy, {dailyApyAmount}) => formatApyAndAmount(dailyApy, dailyApyAmount)\r\n\r\nconst withdrawalFeeFormatter = (withdrawalFee, {dailyApy}) => <span className={\r\n    numeral(withdrawalFee).value() === 0 ? 'text-success' :\r\n    numeral(withdrawalFee).value() > dailyApy ? 'text-danger' : ''}>{withdrawalFee}</span>\r\n\r\nconst tradingFeesFormatter = (_, pool) =>\r\npool.tradingApr ?\r\n  <OverlayTrigger\r\n    overlay={\r\n      <Popover id=\"popover-basic\">\r\n        <Popover.Title as=\"h3\">APY Breakdown</Popover.Title>\r\n        <Popover.Content>\r\n          <Table striped bordered hover>\r\n            <tbody>\r\n            {pool.compoundingsPerYear && <tr>\r\n              <td>Compounds</td>\r\n              <td>{formatInteger(pool.compoundingsPerYear)}</td>\r\n            </tr>}\r\n            {pool.vaultApr && <tr>\r\n              <td>Vault APR</td>\r\n              <td>{prettyPercentage(pool.vaultApr)}</td>\r\n            </tr>}\r\n            {pool.beefyPerformanceFee && <tr>\r\n              <td>Beefy Fee</td>\r\n              <td>{prettyPercentage(pool.beefyPerformanceFee)}</td>\r\n            </tr>}\r\n            {pool.callFee && <tr>\r\n              <td>Call Fee</td>\r\n              <td>{prettyPercentage(pool.callFee/100)}</td>\r\n            </tr>}\r\n            {pool.vaultApy && <tr>\r\n              <td>Vault APY</td>\r\n              <td>{prettyPercentage(pool.vaultApy)}</td>\r\n            </tr>}\r\n            {pool.lpFee && <tr>\r\n              <td>LP Fee</td>\r\n              <td>{prettyPercentage(pool.lpFee)}</td>\r\n            </tr>}\r\n            {pool.tradingApr && <tr>\r\n              <td>Trading APR</td>\r\n              <td>{prettyPercentage(pool.tradingApr)}</td>\r\n            </tr>}\r\n            {pool.totalApy && <tr>\r\n              <td>Total APY</td>\r\n              <td>{prettyPercentage(pool.totalApy)}</td>\r\n            </tr>}\r\n            </tbody>\r\n          </Table>\r\n        </Popover.Content>\r\n      </Popover>\r\n    }\r\n  >\r\n    <Button variant=\"success\">Included</Button>\r\n  </OverlayTrigger> : pool.assets.length === 1 ? '-' : \"Unknown\"\r\n\r\nconst tvlFormatter = tvl => formatFiat(tvl)\r\n\r\nconst columns = [\r\n  {\r\n    dataField: \"network\",\r\n    text: \"Network\",\r\n    sort: true,\r\n    formatter: networkFormatter\r\n  },\r\n\r\n  {\r\n    dataField: \"platform\",\r\n    text: \"Platform\",\r\n    sort: true\r\n  },\r\n  {\r\n    dataField: \"name\",\r\n    text: \"Pool\",\r\n    formatter: poolFormatter\r\n  },\r\n  {\r\n    dataField: \"totalApy\",\r\n    text: \"APY\",\r\n    sort: true,\r\n    formatter: apyFormatter\r\n  },\r\n  {\r\n    dataField: \"dailyApy\",\r\n    text: \"Daily\",\r\n    sort: true,\r\n    formatter: dailyFormatter\r\n  },\r\n  {\r\n    dataField: \"withdrawalFee\",\r\n    text: \"Withdraw\",\r\n    sort: true,\r\n    formatter: withdrawalFeeFormatter\r\n  },\r\n  {\r\n    dataField: \"tradingApr\",\r\n    text: \"Trading Fees\",\r\n    formatter: tradingFeesFormatter\r\n  },\r\n  {\r\n    dataField: \"tvl\",\r\n    text: \"TVL\",\r\n    sort: true,\r\n    formatter: tvlFormatter\r\n  }\r\n]\r\n\r\nconst YieldTable = ({yields}) =>\r\n  <BootstrapTable\r\n    keyField=\"key\"\r\n    data={yields}\r\n    columns={columns}\r\n    expandRow={expandRow}\r\n    striped\r\n    hover\r\n    bootstrap4\r\n    defaultSorted={[{ dataField: 'totalApy', order: 'desc'}]}/>\r\n\r\nexport default YieldTable\r\n","import { createContext } from 'react'\r\n\r\nexport const emptyFilters = {\r\n  desiredCoins: '',\r\n  strictFilter: true,\r\n  exactMatch: false,\r\n  desiredPlatforms: '',\r\n  desiredNetworks: '',\r\n  includeSingleAssets: true,\r\n  includeLPs: true\r\n}\r\n\r\nexport const defaultFilters = {\r\n  ...emptyFilters,\r\n  desiredCoins: 'usdc dai busd usdt',\r\n}\r\n\r\nconst FiltersContext = createContext(defaultFilters)\r\n\r\nexport default FiltersContext","import React, {useContext} from 'react'\r\n\r\nimport './Filters.scss'\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport {Form, ButtonGroup, Spinner} from 'react-bootstrap'\r\nimport FiltersContext, {emptyFilters, defaultFilters} from '../contexts/filters.context'\r\n\r\nconst Filters = ({loading, poolCount}) => {\r\n  const { filters, setFilters } = useContext(FiltersContext)\r\n\r\n  const handleChange = event => {\r\n    const { value, name } = event.target\r\n\r\n    setFilters({...filters, [name]: value })\r\n  }\r\n\r\n  const handleCheckBoxChange = event => {\r\n    const { checked, name } = event.target\r\n\r\n    setFilters({...filters, [name]: checked })\r\n  }\r\n\r\n  const { desiredCoins, strictFilter, exactMatch, desiredPlatforms, desiredNetworks, includeSingleAssets, includeLPs } = filters\r\n\r\n  return (\r\n      <Jumbotron className='filters'>\r\n        <Form.Group>\r\n          <Form.Label>💎 Coins to Ride</Form.Label>\r\n          <Form.Control name='desiredCoins' value={desiredCoins} size=\"sm\" type=\"text\" placeholder=\"e.g. usdc dai busd\" onChange={handleChange} />\r\n          <Form.Check>\r\n            <Form.Check.Input id='strictFilter' name='strictFilter' checked={strictFilter} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='strictFilter'>Show ONLY these coins <span className='silent'>(USDC won't show USDC-DAI)</span></Form.Check.Label>\r\n          </Form.Check>\r\n          <Form.Check>\r\n            <Form.Check.Input id='exactMatch' name='exactMatch' checked={exactMatch} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='exactMatch'>Exact Match <span className='silent'>(USDT won't match fUSDT)</span></Form.Check.Label>\r\n          </Form.Check>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Check>\r\n            <Form.Check.Input id='includeLPs' name='includeLPs' checked={includeLPs}  type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='includeLPs'>Include Liquidity Pools</Form.Check.Label>\r\n          </Form.Check>\r\n          <Form.Check>\r\n            <Form.Check.Input id='includeSingleAssets' name='includeSingleAssets' checked={includeSingleAssets} type=\"checkbox\" onChange={handleCheckBoxChange} />\r\n            <Form.Check.Label htmlFor='includeSingleAssets'>Include Single Assets</Form.Check.Label>\r\n          </Form.Check>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Label>🏰 Platforms to Ride</Form.Label>\r\n          <Form.Control name='desiredPlatforms' value={desiredPlatforms} size=\"sm\" type=\"text\" placeholder=\"e.g. cake aave sushi\" onChange={handleChange}/>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <Form.Group>\r\n          <Form.Label>🌐 Networks to Ride</Form.Label>\r\n          <Form.Control name='desiredNetworks' value={desiredNetworks} size=\"sm\" type=\"text\" placeholder=\"e.g. bsc polygon\" onChange={handleChange}/>\r\n        </Form.Group>\r\n\r\n        <hr/>\r\n\r\n        <span>{loading ? <>Loading pools... <Spinner size='sm' animation=\"border\" role=\"status\"/></> :\r\n          poolCount === 0 ? 'No pools found, please check your filters' :\r\n            `Found ${poolCount} pool${poolCount === 1 ? '' : 's'} on 🐮 Beefy Finance.`}</span>\r\n        <ButtonGroup className='reset-filters-btn'>\r\n          <Button size='sm' variant='info' onClick={() => { setFilters(emptyFilters)}}>Clear Filters</Button>\r\n          <Button size='sm' variant='success' onClick={() => { setFilters(defaultFilters)}}>Default Filters</Button>\r\n        </ButtonGroup>\r\n      </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","import {Nav, Navbar, OverlayTrigger, Tooltip} from 'react-bootstrap'\r\n\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport './TopNavbar.scss'\r\nimport {useState} from 'react'\r\n\r\nconst TopNavbar = () => {\r\n  const [copied, setCopied] = useState(false)\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"\">\r\n          <img\r\n            alt=\"\"\r\n            src=\"/hat_short.png\"\r\n            className=\"navbar-image\"\r\n          />{'   '}\r\n          <span className='navbar-title'>yield.rodeo</span>\r\n        </Navbar.Brand>\r\n        <Nav className=\"ml-auto\">\r\n          <OverlayTrigger\r\n            placement=\"bottom\"\r\n            overlay={<Tooltip>{copied ? 'Copied!' : 'Click to copy!'}</Tooltip>}\r\n          >\r\n            <CopyToClipboard text={'0x6e1b11ad54068dd3C7A2cAf334A7010f0B59511C'}\r\n            onCopy={() => {\r\n              setCopied(true)\r\n              setTimeout(() => { setCopied(false) },1000)\r\n            }}>\r\n              <span>❤️ 0x6e1b11ad54068dd3C7A2cAf334A7010f0B59511C ❤️</span>\r\n            </CopyToClipboard>\r\n          </OverlayTrigger>\r\n        </Nav>\r\n      <Nav>\r\n        <Nav.Link className='navbar-contact' href={'https://naezith.com/?id=contact'} target=\"_blank\" rel=\"noreferrer\">Contact</Nav.Link>\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default TopNavbar","import { createContext } from 'react'\r\n\r\nexport const emptyInputs = {\r\n  capital: 100000,\r\n  amountBefore: 100000,\r\n  amountAfter: 125000\r\n}\r\n\r\nexport const defaultInputs = {\r\n  ...emptyInputs\r\n}\r\n\r\nconst InputsContext = createContext(defaultInputs)\r\n\r\nexport default InputsContext","import React, {useContext} from 'react'\r\n\r\nimport './Filters.scss'\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport {Form, InputGroup} from 'react-bootstrap'\r\nimport InputsContext from '../contexts/inputs.context'\r\nimport {formatAny} from '../utility/utils'\r\n\r\nconst Inputs = () => {\r\n  const { inputs, setInputs } = useContext(InputsContext)\r\n\r\n  const handleChange = event => {\r\n    const { value, name } = event.target\r\n\r\n    setInputs({...inputs, [name]: value })\r\n  }\r\n\r\n  const { capital, amountBefore, amountAfter } = inputs\r\n\r\n  const amountDifference = amountAfter - amountBefore\r\n  const pnl = amountDifference / amountBefore\r\n  const fieldsAreValid = amountAfter !== '' && amountBefore !== ''\r\n  const sign = pnl > 0 ? '+' : ''\r\n\r\n  return (\r\n    <Jumbotron className='filters'>\r\n      <Form.Label>💰 Capital</Form.Label>\r\n      <InputGroup className=\"mb-3\" size=\"sm\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>$</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control name='capital' value={capital} type=\"number\" placeholder=\"e.g. 1000\" onChange={handleChange} />\r\n      </InputGroup>\r\n\r\n      <hr/>\r\n\r\n      <Form.Label>🖩 Profit % Calculator </Form.Label>\r\n      <InputGroup className=\"mb-3\" size=\"sm\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Before</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control name='amountBefore' value={amountBefore} type=\"number\" placeholder=\"e.g. 1000\" onChange={handleChange} />\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>After</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control name='amountAfter' value={amountAfter} type=\"number\" placeholder=\"e.g. 1000\" onChange={handleChange} />\r\n      </InputGroup>\r\n      <Form.Label className={ !fieldsAreValid || pnl > 0 ? 'text-success' : pnl < 0 ? 'text-danger' : ''}>\r\n        { fieldsAreValid ? 'P&L: ' + sign + formatAny(amountDifference, '0,0.[000]') + ' (' + sign + formatAny(pnl, '0.[000]%') + ')' :\r\n          'Please fill the fields'}\r\n      </Form.Label>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Inputs\r\n","import React, {useEffect, useState} from 'react'\r\n\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport './App.css'\r\nimport {getYieldsWithPrices} from './utility/api'\r\nimport YieldTable from './components/YieldTable'\r\nimport Filters from './components/Filters'\r\nimport FiltersContext, {defaultFilters} from './contexts/filters.context'\r\nimport TopNavbar from './components/TopNavbar'\r\nimport {addApyValues, filterPools} from './utility/utils'\r\nimport {Col, Spinner} from 'react-bootstrap'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Inputs from './components/Inputs'\r\nimport InputsContext, {defaultInputs} from './contexts/inputs.context'\r\n\r\nconst App = () => {\r\n  const [yields, setYields] = useState([])\r\n  const [inputs, setInputs] = useState(defaultInputs)\r\n  const [filters, setFilters] = useState(defaultFilters)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      // Get yields\r\n      setLoading(true)\r\n      const _yields = await getYieldsWithPrices()\r\n      setLoading(false)\r\n      setYields(_yields)\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  const finalYields = addApyValues(filterPools(yields, filters).map(pool => ({ ...pool, self: pool })), inputs.capital)\r\n  return (\r\n    <div className='full-height'>\r\n      <Container className=\"p-3 App\">\r\n        <Row>\r\n          <Col>\r\n          <TopNavbar />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n      <InputsContext.Provider value={{inputs, setInputs}}>\r\n      <FiltersContext.Provider value={{filters, setFilters}}>\r\n      <Container className=\"p-3 App\">\r\n        <Row>\r\n          <Col>\r\n            <Filters loading={loading} poolCount={finalYields.length}/>\r\n          </Col>\r\n          <Col>\r\n            <Inputs />\r\n          </Col>\r\n        </Row>\r\n          { loading ?\r\n            <Spinner animation=\"border\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </Spinner> :\r\n\r\n            <Row>\r\n              <Col>\r\n                <YieldTable yields={finalYields} />\r\n              </Col>\r\n            </Row>\r\n          }\r\n      </Container>\r\n      </FiltersContext.Provider>\r\n      </InputsContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootswatch-darkly-bootstrap.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import {calcDaily} from './utils'\r\n\r\nconst networks = ['avalanche', 'bsc', 'fantom', 'heco', 'polygon']\r\nconst network_info = {\r\n  'bsc': {\r\n    id: 56,\r\n    explorer: 'https://bscscan.com/address/'\r\n  },\r\n  'heco': {\r\n    id: 128,\r\n    explorer: 'https://hecoinfo.com/address/'\r\n  },\r\n  'polygon': {\r\n    id: 137,\r\n    explorer: 'https://polygonscan.com/address/'\r\n  },\r\n  'fantom': {\r\n    id: 250,\r\n    explorer: 'https://ftmscan.com/address/'\r\n  },\r\n  'avalanche': {\r\n    id: 43114,\r\n    explorer: 'https://cchain.explorer.avax.network/address/'\r\n  },\r\n}\r\n\r\nconst getPools = async (network, type) => {\r\n  const result = await fetch(\r\n      type === 'stake' ?\r\n          `https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/features/configure/stake/${network}_stake.js` :\r\n          `https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/features/configure/vault/${network}_pools.js`\r\n  )\r\n\r\n  let text = await result.text()\r\n  const beginningText = ' = ['\r\n  const endingText = '];'\r\n  text = text.substr(text.indexOf(beginningText) + beginningText.length - 1,\r\n      text.indexOf(endingText) - endingText.length)\r\n      .replace(/earnContractAbi: govPoolABI,/g, '')\r\n      .replace(/, '4BELT'/g, '')\r\n      .replace(/\\[.*moonpot.*\\]/g, '[]')\r\n\r\n  const jsonObj = eval(text)\r\n\r\n  for(let pool of jsonObj) {\r\n    pool.network = network\r\n    pool.network_id = network_info[network].id\r\n    pool.key = network + '-' + pool.id\r\n    pool.type = type // stake or pool\r\n  }\r\n\r\n  return jsonObj\r\n}\r\n\r\nconst fetchAllPools = async () => {\r\n  let pools = {\r\n    'stake': {},\r\n    'pool': {},\r\n  }\r\n\r\n  await Promise.all(Object.keys(pools).map(async type => {\r\n    await Promise.all(networks.map(async network => {\r\n      pools[type][network] = await getPools(network, type)\r\n    }))\r\n  }))\r\n\r\n\r\n  let allCombined = []\r\n\r\n  for(let type of Object.keys(pools))\r\n    for(let network of networks)\r\n      allCombined = allCombined.concat(pools[type][network])\r\n\r\n  return allCombined\r\n}\r\n\r\nexport const getYieldsWithPrices = async () => {\r\n  const yields = await fetchAllPools()\r\n  const prices = await (await fetch('https://api.beefy.finance/lps')).json()\r\n  const apyBreakdowns = await (await fetch('https://api.beefy.finance/apy/breakdown')).json()\r\n  const tvls = await (await fetch('https://api.beefy.finance/tvl')).json()\r\n\r\n  return yields.map(pool => {\r\n    const lpPrice = prices[pool.id]\r\n    const tvlToken = tvls[pool.network_id][pool.id]\r\n    const apyBreakdown = apyBreakdowns[pool.id]\r\n    return {\r\n      depositFee: '0.0%',\r\n      withdrawalFee: '0.1%',\r\n      dailyApy: apyBreakdown && calcDaily(apyBreakdown.totalApy),\r\n      ...pool,\r\n      lpPrice: lpPrice,\r\n      tvl: tvlToken,\r\n      ...apyBreakdown\r\n    }\r\n  }).filter(pool => pool.tvl > 0 && pool.totalApy > 0.0001)\r\n      .sort((a, b) => a.totalApy < b.totalApy ? 1 : -1)\r\n}\r\n\r\nexport const coinLogoUrl = ticker => 'https://trustwallet-assets-api.vercel.app/api/symbol/'  + ticker\r\nexport const poolLogoUrl = path => 'https://raw.githubusercontent.com/beefyfinance/beefy-app/master/src/images/'  + path\r\nexport const addressUrl = (network, address) => network_info[network].explorer + address"],"sourceRoot":""}